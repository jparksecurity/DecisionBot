// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { ByteniteappApp, byteniteappApp, byteniteappAppRequest, byteniteappAppResponse } from './byteniteapp-app';

/**
 * The shape of the model inside the application code - what the users use
 */
export const developerAppListResponse = z.lazy(() => {
  return z.object({
    apps: z.array(byteniteappApp).optional(),
  });
});

/**
 *
 * @typedef  {DeveloperAppListResponse} developerAppListResponse
 * @property {ByteniteappApp[]}
 */
export type DeveloperAppListResponse = z.infer<typeof developerAppListResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const developerAppListResponseResponse = z.lazy(() => {
  return z
    .object({
      apps: z.array(byteniteappAppResponse).optional(),
    })
    .transform((data) => ({
      apps: data['apps'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const developerAppListResponseRequest = z.lazy(() => {
  return z
    .object({
      apps: z.array(byteniteappAppRequest).optional(),
    })
    .transform((data) => ({
      apps: data['apps'],
    }));
});
