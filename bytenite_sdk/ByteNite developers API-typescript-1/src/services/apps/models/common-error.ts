// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const commonError = z.lazy(() => {
  return z.object({
    code: z.number().optional(),
    message: z.string().optional(),
    description: z.string().optional(),
  });
});

/**
 *
 * @typedef  {CommonError} commonError
 * @property {number} - Error code if the request failed.
 * @property {string} - Short description of the error if occurred.
 * @property {string} - Full detailed explanation of the error if applicable.
 */
export type CommonError = z.infer<typeof commonError>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const commonErrorResponse = z.lazy(() => {
  return z
    .object({
      code: z.number().optional(),
      message: z.string().optional(),
      description: z.string().optional(),
    })
    .transform((data) => ({
      code: data['code'],
      message: data['message'],
      description: data['description'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const commonErrorRequest = z.lazy(() => {
  return z
    .object({
      code: z.number().optional(),
      message: z.string().optional(),
      description: z.string().optional(),
    })
    .transform((data) => ({
      code: data['code'],
      message: data['message'],
      description: data['description'],
    }));
});
