// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { JobJobTemplate, jobJobTemplate, jobJobTemplateRequest, jobJobTemplateResponse } from './job-job-template';

/**
 * The shape of the model inside the application code - what the users use
 */
export const jobJobTemplates = z.lazy(() => {
  return z.object({
    templates: z.array(jobJobTemplate).optional(),
  });
});

/**
 *
 * @typedef  {JobJobTemplates} jobJobTemplates
 * @property {JobJobTemplate[]}
 */
export type JobJobTemplates = z.infer<typeof jobJobTemplates>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const jobJobTemplatesResponse = z.lazy(() => {
  return z
    .object({
      templates: z.array(jobJobTemplateResponse).optional(),
    })
    .transform((data) => ({
      templates: data['templates'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const jobJobTemplatesRequest = z.lazy(() => {
  return z
    .object({
      templates: z.array(jobJobTemplateRequest).optional(),
    })
    .transform((data) => ({
      templates: data['templates'],
    }));
});
