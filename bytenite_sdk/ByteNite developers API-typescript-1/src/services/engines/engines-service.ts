// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse, RequestConfig } from '../../http/types';
import { RequestBuilder } from '../../http/transport/request-builder';
import { SerializationStyle } from '../../http/serialization/base-serializer';
import { ThrowableError } from '../../http/errors/throwable-error';
import { Environment } from '../../http/environment';
import { ArrayOfEngine, arrayOfEngineResponse } from './models/array-of-engine';
import { RpcStatus } from '../common/rpc-status';
import {
  DeveloperActivateEngineParams,
  DeveloperDeactivateEngineParams,
  DeveloperGetEngineByTagParams,
  DeveloperGetEngineLinkParams,
  DeveloperGetEngineStatusParams,
  DeveloperGetEnginesParams,
  DeveloperUploadEngineParams,
} from './request-params';
import {
  RepresentsAnEngineAndItsMetadata,
  representsAnEngineAndItsMetadataResponse,
} from './models/represents-an-engine-and-its-metadata';
import { DeveloperEngineMessage, developerEngineMessageResponse } from './models/developer-engine-message';

export class EnginesService extends BaseService {
  /**
   * List all engines owned by the user
   * @param {string} [params.orderBy] - Field name to sort apps by (e.g., createdAt).
   * @param {number} [params.paginationLimit] - Number of rows to return per page.
   * @param {number} [params.paginationOffset] - Number of rows to skip before starting to collect the result set.
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<ArrayOfEngine>>} A successful response.
   */
  async developerGetEngines(
    params?: DeveloperGetEnginesParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<ArrayOfEngine | ArrayOfEngine>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/engines')
      .setRequestSchema(z.any())
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey)
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: arrayOfEngineResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addResponse({
        schema: arrayOfEngineResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'orderBy',
        value: params?.orderBy,
      })
      .addQueryParam({
        key: 'pagination.limit',
        value: params?.paginationLimit,
      })
      .addQueryParam({
        key: 'pagination.offset',
        value: params?.paginationOffset,
      })
      .build();
    return this.client.call<ArrayOfEngine | ArrayOfEngine>(request);
  }

  /**
   * Upload a engine to the server
   * @param {string} [params.engineId] -
   * @param {string} [params.engineTag] -
   * @param {string} [params.engineData] -
   * @param {string} [params.engineLink] -
   * @param {string} [params.engineStatus] -
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<RepresentsAnEngineAndItsMetadata>>} A successful response.
   */
  async developerUploadEngine(
    params?: DeveloperUploadEngineParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<RepresentsAnEngineAndItsMetadata | RepresentsAnEngineAndItsMetadata>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('POST')
      .setPath('/engines')
      .setRequestSchema(z.any())
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey)
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: representsAnEngineAndItsMetadataResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addResponse({
        schema: representsAnEngineAndItsMetadataResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'engineId',
        value: params?.engineId,
      })
      .addQueryParam({
        key: 'engineTag',
        value: params?.engineTag,
      })
      .addQueryParam({
        key: 'engineData',
        value: params?.engineData,
      })
      .addQueryParam({
        key: 'engineLink',
        value: params?.engineLink,
      })
      .addQueryParam({
        key: 'engineStatus',
        value: params?.engineStatus,
      })
      .build();
    return this.client.call<RepresentsAnEngineAndItsMetadata | RepresentsAnEngineAndItsMetadata>(request);
  }

  /**
   * Get an engine by tag
   * @param {string} engineTag -
   * @param {string} [params.engineId] -
   * @param {string} [params.engineData] -
   * @param {string} [params.engineLink] -
   * @param {string} [params.engineStatus] -
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<RepresentsAnEngineAndItsMetadata>>} A successful response.
   */
  async developerGetEngineByTag(
    engineTag: string,
    params?: DeveloperGetEngineByTagParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<RepresentsAnEngineAndItsMetadata | RepresentsAnEngineAndItsMetadata>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/engines/{engineTag}')
      .setRequestSchema(z.any())
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey)
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: representsAnEngineAndItsMetadataResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addResponse({
        schema: representsAnEngineAndItsMetadataResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'engineTag',
        value: engineTag,
      })
      .addQueryParam({
        key: 'engineId',
        value: params?.engineId,
      })
      .addQueryParam({
        key: 'engineData',
        value: params?.engineData,
      })
      .addQueryParam({
        key: 'engineLink',
        value: params?.engineLink,
      })
      .addQueryParam({
        key: 'engineStatus',
        value: params?.engineStatus,
      })
      .build();
    return this.client.call<RepresentsAnEngineAndItsMetadata | RepresentsAnEngineAndItsMetadata>(request);
  }

  /**
   * Activate an Engine
   * @param {string} engineTag -
   * @param {string} [params.engineId] -
   * @param {string} [params.engineData] -
   * @param {string} [params.engineLink] -
   * @param {string} [params.engineStatus] -
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<DeveloperEngineMessage>>} A successful response.
   */
  async developerActivateEngine(
    engineTag: string,
    params?: DeveloperActivateEngineParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<DeveloperEngineMessage | DeveloperEngineMessage>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('POST')
      .setPath('/engines/{engineTag}/activate')
      .setRequestSchema(z.any())
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey)
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: developerEngineMessageResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addResponse({
        schema: developerEngineMessageResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'engineTag',
        value: engineTag,
      })
      .addQueryParam({
        key: 'engineId',
        value: params?.engineId,
      })
      .addQueryParam({
        key: 'engineData',
        value: params?.engineData,
      })
      .addQueryParam({
        key: 'engineLink',
        value: params?.engineLink,
      })
      .addQueryParam({
        key: 'engineStatus',
        value: params?.engineStatus,
      })
      .build();
    return this.client.call<DeveloperEngineMessage | DeveloperEngineMessage>(request);
  }

  /**
   * Deactivate an Engine
   * @param {string} engineTag -
   * @param {string} [params.engineId] -
   * @param {string} [params.engineData] -
   * @param {string} [params.engineLink] -
   * @param {string} [params.engineStatus] -
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<DeveloperEngineMessage>>} A successful response.
   */
  async developerDeactivateEngine(
    engineTag: string,
    params?: DeveloperDeactivateEngineParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<DeveloperEngineMessage | DeveloperEngineMessage>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('POST')
      .setPath('/engines/{engineTag}/deactivate')
      .setRequestSchema(z.any())
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey)
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: developerEngineMessageResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addResponse({
        schema: developerEngineMessageResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'engineTag',
        value: engineTag,
      })
      .addQueryParam({
        key: 'engineId',
        value: params?.engineId,
      })
      .addQueryParam({
        key: 'engineData',
        value: params?.engineData,
      })
      .addQueryParam({
        key: 'engineLink',
        value: params?.engineLink,
      })
      .addQueryParam({
        key: 'engineStatus',
        value: params?.engineStatus,
      })
      .build();
    return this.client.call<DeveloperEngineMessage | DeveloperEngineMessage>(request);
  }

  /**
   * Download an Engine
   * @param {string} engineTag -
   * @param {string} [params.engineId] -
   * @param {string} [params.engineData] -
   * @param {string} [params.engineLink] -
   * @param {string} [params.engineStatus] -
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<DeveloperEngineMessage>>} A successful response.
   */
  async developerGetEngineLink(
    engineTag: string,
    params?: DeveloperGetEngineLinkParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<DeveloperEngineMessage | DeveloperEngineMessage>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/engines/{engineTag}/download')
      .setRequestSchema(z.any())
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey)
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: developerEngineMessageResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addResponse({
        schema: developerEngineMessageResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'engineTag',
        value: engineTag,
      })
      .addQueryParam({
        key: 'engineId',
        value: params?.engineId,
      })
      .addQueryParam({
        key: 'engineData',
        value: params?.engineData,
      })
      .addQueryParam({
        key: 'engineLink',
        value: params?.engineLink,
      })
      .addQueryParam({
        key: 'engineStatus',
        value: params?.engineStatus,
      })
      .build();
    return this.client.call<DeveloperEngineMessage | DeveloperEngineMessage>(request);
  }

  /**
   * Get status of engine
   * @param {string} engineTag -
   * @param {string} [params.engineId] -
   * @param {string} [params.engineData] -
   * @param {string} [params.engineLink] -
   * @param {string} [params.engineStatus] -
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<DeveloperEngineMessage>>} A successful response.
   */
  async developerGetEngineStatus(
    engineTag: string,
    params?: DeveloperGetEngineStatusParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<DeveloperEngineMessage | DeveloperEngineMessage>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/engines/{engineTag}/status')
      .setRequestSchema(z.any())
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey)
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: developerEngineMessageResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addResponse({
        schema: developerEngineMessageResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'engineTag',
        value: engineTag,
      })
      .addQueryParam({
        key: 'engineId',
        value: params?.engineId,
      })
      .addQueryParam({
        key: 'engineData',
        value: params?.engineData,
      })
      .addQueryParam({
        key: 'engineLink',
        value: params?.engineLink,
      })
      .addQueryParam({
        key: 'engineStatus',
        value: params?.engineStatus,
      })
      .build();
    return this.client.call<DeveloperEngineMessage | DeveloperEngineMessage>(request);
  }
}
