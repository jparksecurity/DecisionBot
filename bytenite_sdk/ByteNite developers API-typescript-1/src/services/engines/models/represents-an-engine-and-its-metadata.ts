// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  PlatformConfigRepresentsConfigurationForAPlatform,
  platformConfigRepresentsConfigurationForAPlatform,
  platformConfigRepresentsConfigurationForAPlatformRequest,
  platformConfigRepresentsConfigurationForAPlatformResponse,
} from '../../common/platform-config-represents-configuration-for-a-platform';
import {
  CommonDeviceRequirements,
  commonDeviceRequirements,
  commonDeviceRequirementsRequest,
  commonDeviceRequirementsResponse,
} from '../../common/common-device-requirements';

/**
 * The shape of the model inside the application code - what the users use
 */
export const representsAnEngineAndItsMetadata = z.lazy(() => {
  return z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    version: z.string().optional(),
    owner: z.string().optional(),
    type: z.string().optional(),
    status: z.string().optional(),
    description: z.string().optional(),
    hash: z.string().optional(),
    link: z.string().optional(),
    entrypoint: z.string().optional(),
    revision: z.number().optional(),
    createdAt: z.string().optional(),
    updatedAt: z.string().optional(),
    deletedAt: z.string().optional(),
    platform: z.string().optional(),
    platformConfig: platformConfigRepresentsConfigurationForAPlatform.optional(),
    deviceRequirements: commonDeviceRequirements.optional(),
  });
});

/**
 *
 * @typedef  {RepresentsAnEngineAndItsMetadata} representsAnEngineAndItsMetadata
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {number}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string} - Platform identifier where the engine runs.
 * @property {PlatformConfigRepresentsConfigurationForAPlatform}
 * @property {CommonDeviceRequirements} - DeviceRequirements represents the minimum hardware requirements for running the app/engine.
 */
export type RepresentsAnEngineAndItsMetadata = z.infer<typeof representsAnEngineAndItsMetadata>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const representsAnEngineAndItsMetadataResponse = z.lazy(() => {
  return z
    .object({
      id: z.string().optional(),
      name: z.string().optional(),
      version: z.string().optional(),
      owner: z.string().optional(),
      type: z.string().optional(),
      status: z.string().optional(),
      description: z.string().optional(),
      hash: z.string().optional(),
      link: z.string().optional(),
      entrypoint: z.string().optional(),
      revision: z.number().optional(),
      createdAt: z.string().optional(),
      updatedAt: z.string().optional(),
      deletedAt: z.string().optional(),
      platform: z.string().optional(),
      platformConfig: platformConfigRepresentsConfigurationForAPlatformResponse.optional(),
      deviceRequirements: commonDeviceRequirementsResponse.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      name: data['name'],
      version: data['version'],
      owner: data['owner'],
      type: data['type'],
      status: data['status'],
      description: data['description'],
      hash: data['hash'],
      link: data['link'],
      entrypoint: data['entrypoint'],
      revision: data['revision'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      deletedAt: data['deletedAt'],
      platform: data['platform'],
      platformConfig: data['platformConfig'],
      deviceRequirements: data['deviceRequirements'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const representsAnEngineAndItsMetadataRequest = z.lazy(() => {
  return z
    .object({
      id: z.string().optional(),
      name: z.string().optional(),
      version: z.string().optional(),
      owner: z.string().optional(),
      type: z.string().optional(),
      status: z.string().optional(),
      description: z.string().optional(),
      hash: z.string().optional(),
      link: z.string().optional(),
      entrypoint: z.string().optional(),
      revision: z.number().optional(),
      createdAt: z.string().optional(),
      updatedAt: z.string().optional(),
      deletedAt: z.string().optional(),
      platform: z.string().optional(),
      platformConfig: platformConfigRepresentsConfigurationForAPlatformRequest.optional(),
      deviceRequirements: commonDeviceRequirementsRequest.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      name: data['name'],
      version: data['version'],
      owner: data['owner'],
      type: data['type'],
      status: data['status'],
      description: data['description'],
      hash: data['hash'],
      link: data['link'],
      entrypoint: data['entrypoint'],
      revision: data['revision'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      deletedAt: data['deletedAt'],
      platform: data['platform'],
      platformConfig: data['platformConfig'],
      deviceRequirements: data['deviceRequirements'],
    }));
});
