// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const developerEngineMessage = z.lazy(() => {
  return z.object({
    engineId: z.string().optional(),
    engineTag: z.string().optional(),
    engineData: z.string().optional(),
    engineLink: z.string().optional(),
    engineStatus: z.string().optional(),
  });
});

/**
 *
 * @typedef  {DeveloperEngineMessage} developerEngineMessage
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 */
export type DeveloperEngineMessage = z.infer<typeof developerEngineMessage>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const developerEngineMessageResponse = z.lazy(() => {
  return z
    .object({
      engineId: z.string().optional(),
      engineTag: z.string().optional(),
      engineData: z.string().optional(),
      engineLink: z.string().optional(),
      engineStatus: z.string().optional(),
    })
    .transform((data) => ({
      engineId: data['engineId'],
      engineTag: data['engineTag'],
      engineData: data['engineData'],
      engineLink: data['engineLink'],
      engineStatus: data['engineStatus'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const developerEngineMessageRequest = z.lazy(() => {
  return z
    .object({
      engineId: z.string().optional(),
      engineTag: z.string().optional(),
      engineData: z.string().optional(),
      engineLink: z.string().optional(),
      engineStatus: z.string().optional(),
    })
    .transform((data) => ({
      engineId: data['engineId'],
      engineTag: data['engineTag'],
      engineData: data['engineData'],
      engineLink: data['engineLink'],
      engineStatus: data['engineStatus'],
    }));
});
