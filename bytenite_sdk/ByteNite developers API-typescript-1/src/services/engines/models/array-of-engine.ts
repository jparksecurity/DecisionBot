// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  RepresentsAnEngineAndItsMetadata,
  representsAnEngineAndItsMetadata,
  representsAnEngineAndItsMetadataRequest,
  representsAnEngineAndItsMetadataResponse,
} from './represents-an-engine-and-its-metadata';

/**
 * The shape of the model inside the application code - what the users use
 */
export const arrayOfEngine = z.lazy(() => {
  return z.object({
    engines: z.array(representsAnEngineAndItsMetadata).optional(),
  });
});

/**
 *
 * @typedef  {ArrayOfEngine} arrayOfEngine
 * @property {RepresentsAnEngineAndItsMetadata[]}
 */
export type ArrayOfEngine = z.infer<typeof arrayOfEngine>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const arrayOfEngineResponse = z.lazy(() => {
  return z
    .object({
      engines: z.array(representsAnEngineAndItsMetadataResponse).optional(),
    })
    .transform((data) => ({
      engines: data['engines'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const arrayOfEngineRequest = z.lazy(() => {
  return z
    .object({
      engines: z.array(representsAnEngineAndItsMetadataRequest).optional(),
    })
    .transform((data) => ({
      engines: data['engines'],
    }));
});
