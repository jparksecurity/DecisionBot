// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const platformConfigRepresentsConfigurationForAPlatform = z.lazy(() => {
  return z.object({
    container: z.string().optional(),
    privateImage: z.boolean().optional(),
    username: z.string().optional(),
    token: z.string().optional(),
  });
});

/**
 *
 * @typedef  {PlatformConfigRepresentsConfigurationForAPlatform} platformConfigRepresentsConfigurationForAPlatform
 * @property {string} - Container image identifier.
 * @property {boolean} - Indicates if the container image is from a private registry.
 * @property {string} - Username for accessing a private container registry (if applicable).
 * @property {string} - Authentication token for accessing a private container registry (if applicable).
 */
export type PlatformConfigRepresentsConfigurationForAPlatform = z.infer<
  typeof platformConfigRepresentsConfigurationForAPlatform
>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const platformConfigRepresentsConfigurationForAPlatformResponse = z.lazy(() => {
  return z
    .object({
      container: z.string().optional(),
      privateImage: z.boolean().optional(),
      username: z.string().optional(),
      token: z.string().optional(),
    })
    .transform((data) => ({
      container: data['container'],
      privateImage: data['privateImage'],
      username: data['username'],
      token: data['token'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const platformConfigRepresentsConfigurationForAPlatformRequest = z.lazy(() => {
  return z
    .object({
      container: z.string().optional(),
      privateImage: z.boolean().optional(),
      username: z.string().optional(),
      token: z.string().optional(),
    })
    .transform((data) => ({
      container: data['container'],
      privateImage: data['privateImage'],
      username: data['username'],
      token: data['token'],
    }));
});
