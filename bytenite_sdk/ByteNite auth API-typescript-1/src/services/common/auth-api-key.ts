// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const authApiKey = z.lazy(() => {
  return z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    issuedAt: z.string().optional(),
    expiresAt: z.string().optional(),
    userId: z.string().optional(),
    revoked: z.boolean().optional(),
    fingerprint: z.string().optional(),
  });
});

/**
 *
 * @typedef  {AuthApiKey} authApiKey
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {boolean}
 * @property {string}
 */
export type AuthApiKey = z.infer<typeof authApiKey>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const authApiKeyResponse1 = z.lazy(() => {
  return z
    .object({
      id: z.string().optional(),
      name: z.string().optional(),
      issuedAt: z.string().optional(),
      expiresAt: z.string().optional(),
      userId: z.string().optional(),
      revoked: z.boolean().optional(),
      fingerprint: z.string().optional(),
    })
    .transform((data) => ({
      id: data['id'],
      name: data['name'],
      issuedAt: data['issuedAt'],
      expiresAt: data['expiresAt'],
      userId: data['userId'],
      revoked: data['revoked'],
      fingerprint: data['fingerprint'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const authApiKeyRequest1 = z.lazy(() => {
  return z
    .object({
      id: z.string().optional(),
      name: z.string().optional(),
      issuedAt: z.string().optional(),
      expiresAt: z.string().optional(),
      userId: z.string().optional(),
      revoked: z.boolean().optional(),
      fingerprint: z.string().optional(),
    })
    .transform((data) => ({
      id: data['id'],
      name: data['name'],
      issuedAt: data['issuedAt'],
      expiresAt: data['expiresAt'],
      userId: data['userId'],
      revoked: data['revoked'],
      fingerprint: data['fingerprint'],
    }));
});
