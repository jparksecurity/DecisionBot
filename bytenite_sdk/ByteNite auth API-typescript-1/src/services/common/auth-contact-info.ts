// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const authContactInfo = z.lazy(() => {
  return z.object({
    company: z.string().optional(),
    jobTitle: z.string().optional(),
    phoneNumber: z.string().optional(),
    address1: z.string().optional(),
    address2: z.string().optional(),
    city: z.string().optional(),
    state: z.string().optional(),
    zip: z.string().optional(),
    country: z.string().optional(),
  });
});

/**
 *
 * @typedef  {AuthContactInfo} authContactInfo
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 */
export type AuthContactInfo = z.infer<typeof authContactInfo>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const authContactInfoResponse = z.lazy(() => {
  return z
    .object({
      company: z.string().optional(),
      jobTitle: z.string().optional(),
      phoneNumber: z.string().optional(),
      address1: z.string().optional(),
      address2: z.string().optional(),
      city: z.string().optional(),
      state: z.string().optional(),
      zip: z.string().optional(),
      country: z.string().optional(),
    })
    .transform((data) => ({
      company: data['company'],
      jobTitle: data['jobTitle'],
      phoneNumber: data['phoneNumber'],
      address1: data['address1'],
      address2: data['address2'],
      city: data['city'],
      state: data['state'],
      zip: data['zip'],
      country: data['country'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const authContactInfoRequest = z.lazy(() => {
  return z
    .object({
      company: z.string().optional(),
      jobTitle: z.string().optional(),
      phoneNumber: z.string().optional(),
      address1: z.string().optional(),
      address2: z.string().optional(),
      city: z.string().optional(),
      state: z.string().optional(),
      zip: z.string().optional(),
      country: z.string().optional(),
    })
    .transform((data) => ({
      company: data['company'],
      jobTitle: data['jobTitle'],
      phoneNumber: data['phoneNumber'],
      address1: data['address1'],
      address2: data['address2'],
      city: data['city'],
      state: data['state'],
      zip: data['zip'],
      country: data['country'],
    }));
});
