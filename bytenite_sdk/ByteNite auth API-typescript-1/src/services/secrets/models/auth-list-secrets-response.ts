// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  DataSourceSecret,
  dataSourceSecret,
  dataSourceSecretRequest,
  dataSourceSecretResponse,
} from './data-source-secret';

/**
 * The shape of the model inside the application code - what the users use
 */
export const authListSecretsResponse = z.lazy(() => {
  return z.object({
    secrets: z.array(dataSourceSecret).optional(),
  });
});

/**
 *
 * @typedef  {AuthListSecretsResponse} authListSecretsResponse
 * @property {DataSourceSecret[]}
 */
export type AuthListSecretsResponse = z.infer<typeof authListSecretsResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const authListSecretsResponseResponse = z.lazy(() => {
  return z
    .object({
      secrets: z.array(dataSourceSecretResponse).optional(),
    })
    .transform((data) => ({
      secrets: data['secrets'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const authListSecretsResponseRequest = z.lazy(() => {
  return z
    .object({
      secrets: z.array(dataSourceSecretRequest).optional(),
    })
    .transform((data) => ({
      secrets: data['secrets'],
    }));
});
