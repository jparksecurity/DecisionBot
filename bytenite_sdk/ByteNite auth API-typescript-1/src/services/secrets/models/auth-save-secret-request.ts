// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  DataSourceSecret,
  dataSourceSecret,
  dataSourceSecretRequest,
  dataSourceSecretResponse,
} from './data-source-secret';

/**
 * The shape of the model inside the application code - what the users use
 */
export const authSaveSecretRequest = z.lazy(() => {
  return z.object({
    secret: dataSourceSecret,
    secretKey: z.string(),
  });
});

/**
 *
 * @typedef  {AuthSaveSecretRequest} authSaveSecretRequest
 * @property {DataSourceSecret}
 * @property {string} - Your data source's secret key.
 */
export type AuthSaveSecretRequest = z.infer<typeof authSaveSecretRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const authSaveSecretRequestResponse = z.lazy(() => {
  return z
    .object({
      secret: dataSourceSecretResponse,
      secretKey: z.string(),
    })
    .transform((data) => ({
      secret: data['secret'],
      secretKey: data['secretKey'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const authSaveSecretRequestRequest = z.lazy(() => {
  return z
    .object({
      secret: dataSourceSecretRequest,
      secretKey: z.string(),
    })
    .transform((data) => ({
      secret: data['secret'],
      secretKey: data['secretKey'],
    }));
});
