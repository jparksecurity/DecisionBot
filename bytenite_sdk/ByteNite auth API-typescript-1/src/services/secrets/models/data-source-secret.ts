// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const dataSourceSecret = z.lazy(() => {
  return z.object({
    id: z.string().optional(),
    secretType: z.string(),
    expiresAt: z.string().optional(),
    accessKey: z.string(),
    params: z.any().optional(),
    name: z.string().optional(),
  });
});

/**
 *
 * @typedef  {DataSourceSecret} dataSourceSecret
 * @property {string} - A unique ID for the secret. Note: will be autogenerated if not populated.
 * @property {string} - Identifier for your data source.
 * @property {string} - The expiry date for your secret, in ISO 8601 format.
 * @property {string} - Your data source's access key.
 * @property {any} - Extra parameters (if any) for your data source.
 * @property {string} - A descriptive name for your secret.
 */
export type DataSourceSecret = z.infer<typeof dataSourceSecret>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const dataSourceSecretResponse = z.lazy(() => {
  return z
    .object({
      id: z.string().optional(),
      secretType: z.string(),
      expiresAt: z.string().optional(),
      accessKey: z.string(),
      params: z.any().optional(),
      name: z.string().optional(),
    })
    .transform((data) => ({
      id: data['id'],
      secretType: data['secretType'],
      expiresAt: data['expiresAt'],
      accessKey: data['accessKey'],
      params: data['params'],
      name: data['name'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const dataSourceSecretRequest = z.lazy(() => {
  return z
    .object({
      id: z.string().optional(),
      secretType: z.string(),
      expiresAt: z.string().optional(),
      accessKey: z.string(),
      params: z.any().optional(),
      name: z.string().optional(),
    })
    .transform((data) => ({
      id: data['id'],
      secretType: data['secretType'],
      expiresAt: data['expiresAt'],
      accessKey: data['accessKey'],
      params: data['params'],
      name: data['name'],
    }));
});
