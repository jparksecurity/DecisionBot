// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { AuthApiKey, authApiKey, authApiKeyRequest1, authApiKeyResponse1 } from '../../common/auth-api-key';

/**
 * The shape of the model inside the application code - what the users use
 */
export const authApiKeysResponse = z.lazy(() => {
  return z.object({
    apiKeys: z.array(authApiKey).optional(),
  });
});

/**
 *
 * @typedef  {AuthApiKeysResponse} authApiKeysResponse
 * @property {AuthApiKey[]}
 */
export type AuthApiKeysResponse = z.infer<typeof authApiKeysResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const authApiKeysResponseResponse = z.lazy(() => {
  return z
    .object({
      apiKeys: z.array(authApiKeyResponse1).optional(),
    })
    .transform((data) => ({
      apiKeys: data['apiKeys'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const authApiKeysResponseRequest = z.lazy(() => {
  return z
    .object({
      apiKeys: z.array(authApiKeyRequest1).optional(),
    })
    .transform((data) => ({
      apiKeys: data['apiKeys'],
    }));
});
