// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse, RequestConfig } from '../../http/types';
import { RequestBuilder } from '../../http/transport/request-builder';
import { SerializationStyle } from '../../http/serialization/base-serializer';
import { ThrowableError } from '../../http/errors/throwable-error';
import { Environment } from '../../http/environment';
import { AuthApiKeysResponse, authApiKeysResponseResponse } from './models/auth-api-keys-response';
import { RpcStatus } from '../common/rpc-status';
import { CommonGenericResponse, commonGenericResponseResponse } from '../common/common-generic-response';

export class ApiKeysService extends BaseService {
  /**
   * Get all issued api keys for user
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<AuthApiKeysResponse>>} A successful response.
   */
  async authApiKeys(requestConfig?: RequestConfig): Promise<HttpResponse<AuthApiKeysResponse | AuthApiKeysResponse>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/api_keys')
      .setRequestSchema(z.any())
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey, 'BearerAuth')
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: authApiKeysResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addResponse({
        schema: authApiKeysResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .build();
    return this.client.call<AuthApiKeysResponse | AuthApiKeysResponse>(request);
  }

  /**
   * Revoke an API key
   * @param {string} id -
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<CommonGenericResponse>>} A successful response.
   */
  async authRevokeApiKey(
    id: string,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CommonGenericResponse | CommonGenericResponse>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('POST')
      .setPath('/api_keys/{id}/revoke')
      .setRequestSchema(z.any())
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey, 'BearerAuth')
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: commonGenericResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addResponse({
        schema: commonGenericResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addPathParam({
        key: 'id',
        value: id,
      })
      .build();
    return this.client.call<CommonGenericResponse | CommonGenericResponse>(request);
  }
}
