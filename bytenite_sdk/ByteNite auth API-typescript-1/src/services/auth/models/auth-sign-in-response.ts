// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const authSignInResponse = z.lazy(() => {
  return z.object({
    ok: z.boolean().optional(),
    sentAt: z.string().optional(),
    expireAt: z.string().optional(),
    nonce: z.string().optional(),
  });
});

/**
 *
 * @typedef  {AuthSignInResponse} authSignInResponse
 * @property {boolean}
 * @property {string}
 * @property {string}
 * @property {string}
 */
export type AuthSignInResponse = z.infer<typeof authSignInResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const authSignInResponseResponse = z.lazy(() => {
  return z
    .object({
      ok: z.boolean().optional(),
      sentAt: z.string().optional(),
      expireAt: z.string().optional(),
      nonce: z.string().optional(),
    })
    .transform((data) => ({
      ok: data['ok'],
      sentAt: data['sentAt'],
      expireAt: data['expireAt'],
      nonce: data['nonce'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const authSignInResponseRequest = z.lazy(() => {
  return z
    .object({
      ok: z.boolean().optional(),
      sentAt: z.string().optional(),
      expireAt: z.string().optional(),
      nonce: z.string().optional(),
    })
    .transform((data) => ({
      ok: data['ok'],
      sentAt: data['sentAt'],
      expireAt: data['expireAt'],
      nonce: data['nonce'],
    }));
});
