// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const authTokenRequest = z.lazy(() => {
  return z.object({
    email: z.string().optional(),
    deviceId: z.string().optional(),
    code: z.string().optional(),
    nonce: z.string().optional(),
    loginChallenge: z.string().optional(),
  });
});

/**
 *
 * @typedef  {AuthTokenRequest} authTokenRequest
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 */
export type AuthTokenRequest = z.infer<typeof authTokenRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const authTokenRequestResponse = z.lazy(() => {
  return z
    .object({
      email: z.string().optional(),
      deviceId: z.string().optional(),
      code: z.string().optional(),
      nonce: z.string().optional(),
      loginChallenge: z.string().optional(),
    })
    .transform((data) => ({
      email: data['email'],
      deviceId: data['deviceId'],
      code: data['code'],
      nonce: data['nonce'],
      loginChallenge: data['loginChallenge'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const authTokenRequestRequest = z.lazy(() => {
  return z
    .object({
      email: z.string().optional(),
      deviceId: z.string().optional(),
      code: z.string().optional(),
      nonce: z.string().optional(),
      loginChallenge: z.string().optional(),
    })
    .transform((data) => ({
      email: data['email'],
      deviceId: data['deviceId'],
      code: data['code'],
      nonce: data['nonce'],
      loginChallenge: data['loginChallenge'],
    }));
});
