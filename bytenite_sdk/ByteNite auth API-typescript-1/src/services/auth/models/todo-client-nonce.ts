// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  AuthContactInfo,
  authContactInfo,
  authContactInfoRequest,
  authContactInfoResponse,
} from '../../common/auth-contact-info';

/**
 * The shape of the model inside the application code - what the users use
 */
export const todoClientNonce = z.lazy(() => {
  return z.object({
    email: z.string(),
    firstName: z.string().optional(),
    lastName: z.string().optional(),
    isNewUser: z.boolean(),
    accessCode: z.string().optional(),
    contactInfo: authContactInfo.optional(),
  });
});

/**
 *
 * @typedef  {TodoClientNonce} todoClientNonce
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {boolean}
 * @property {string}
 * @property {AuthContactInfo}
 */
export type TodoClientNonce = z.infer<typeof todoClientNonce>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const todoClientNonceResponse = z.lazy(() => {
  return z
    .object({
      email: z.string(),
      firstName: z.string().optional(),
      lastName: z.string().optional(),
      isNewUser: z.boolean(),
      accessCode: z.string().optional(),
      contactInfo: authContactInfoResponse.optional(),
    })
    .transform((data) => ({
      email: data['email'],
      firstName: data['firstName'],
      lastName: data['lastName'],
      isNewUser: data['isNewUser'],
      accessCode: data['accessCode'],
      contactInfo: data['contactInfo'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const todoClientNonceRequest = z.lazy(() => {
  return z
    .object({
      email: z.string(),
      firstName: z.string().optional(),
      lastName: z.string().optional(),
      isNewUser: z.boolean(),
      accessCode: z.string().optional(),
      contactInfo: authContactInfoRequest.optional(),
    })
    .transform((data) => ({
      email: data['email'],
      firstName: data['firstName'],
      lastName: data['lastName'],
      isNewUser: data['isNewUser'],
      accessCode: data['accessCode'],
      contactInfo: data['contactInfo'],
    }));
});
