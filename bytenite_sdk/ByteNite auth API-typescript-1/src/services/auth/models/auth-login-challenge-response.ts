// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const authLoginChallengeResponse = z.lazy(() => {
  return z.object({
    skip: z.boolean().optional(),
    redirectTo: z.string().optional(),
  });
});

/**
 *
 * @typedef  {AuthLoginChallengeResponse} authLoginChallengeResponse
 * @property {boolean}
 * @property {string}
 */
export type AuthLoginChallengeResponse = z.infer<typeof authLoginChallengeResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const authLoginChallengeResponseResponse = z.lazy(() => {
  return z
    .object({
      skip: z.boolean().optional(),
      redirectTo: z.string().optional(),
    })
    .transform((data) => ({
      skip: data['skip'],
      redirectTo: data['redirectTo'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const authLoginChallengeResponseRequest = z.lazy(() => {
  return z
    .object({
      skip: z.boolean().optional(),
      redirectTo: z.string().optional(),
    })
    .transform((data) => ({
      skip: data['skip'],
      redirectTo: data['redirectTo'],
    }));
});
