// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { AuthApiKey, authApiKey, authApiKeyRequest1, authApiKeyResponse1 } from '../../common/auth-api-key';

/**
 * The shape of the model inside the application code - what the users use
 */
export const authApiKeyResponse = z.lazy(() => {
  return z.object({
    token: z.string().optional(),
    apiKey: authApiKey.optional(),
  });
});

/**
 *
 * @typedef  {AuthApiKeyResponse} authApiKeyResponse
 * @property {string}
 * @property {AuthApiKey}
 */
export type AuthApiKeyResponse = z.infer<typeof authApiKeyResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const authApiKeyResponseResponse = z.lazy(() => {
  return z
    .object({
      token: z.string().optional(),
      apiKey: authApiKeyResponse1.optional(),
    })
    .transform((data) => ({
      token: data['token'],
      apiKey: data['apiKey'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const authApiKeyResponseRequest = z.lazy(() => {
  return z
    .object({
      token: z.string().optional(),
      apiKey: authApiKeyRequest1.optional(),
    })
    .transform((data) => ({
      token: data['token'],
      apiKey: data['apiKey'],
    }));
});
