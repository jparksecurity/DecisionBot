// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const authApiKeyRequest = z.lazy(() => {
  return z.object({
    name: z.string().optional(),
    code: z.string().optional(),
    nonce: z.string().optional(),
    duration: z.string().optional(),
  });
});

/**
 *
 * @typedef  {AuthApiKeyRequest} authApiKeyRequest
 * @property {string}
 * @property {string} - The otp code that you received in your email.
 * @property {string}
 * @property {string}
 */
export type AuthApiKeyRequest = z.infer<typeof authApiKeyRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const authApiKeyRequestResponse = z.lazy(() => {
  return z
    .object({
      name: z.string().optional(),
      code: z.string().optional(),
      nonce: z.string().optional(),
      duration: z.string().optional(),
    })
    .transform((data) => ({
      name: data['name'],
      code: data['code'],
      nonce: data['nonce'],
      duration: data['duration'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const authApiKeyRequestRequest = z.lazy(() => {
  return z
    .object({
      name: z.string().optional(),
      code: z.string().optional(),
      nonce: z.string().optional(),
      duration: z.string().optional(),
    })
    .transform((data) => ({
      name: data['name'],
      code: data['code'],
      nonce: data['nonce'],
      duration: data['duration'],
    }));
});
