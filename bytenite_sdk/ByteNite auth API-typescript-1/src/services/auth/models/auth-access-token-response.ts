// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const authAccessTokenResponse = z.lazy(() => {
  return z.object({
    token: z.string().optional(),
    expiresIn: z.string().optional(),
    scope: z.string().optional(),
  });
});

/**
 *
 * @typedef  {AuthAccessTokenResponse} authAccessTokenResponse
 * @property {string}
 * @property {string}
 * @property {string}
 */
export type AuthAccessTokenResponse = z.infer<typeof authAccessTokenResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const authAccessTokenResponseResponse = z.lazy(() => {
  return z
    .object({
      token: z.string().optional(),
      expiresIn: z.string().optional(),
      scope: z.string().optional(),
    })
    .transform((data) => ({
      token: data['token'],
      expiresIn: data['expiresIn'],
      scope: data['scope'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const authAccessTokenResponseRequest = z.lazy(() => {
  return z
    .object({
      token: z.string().optional(),
      expiresIn: z.string().optional(),
      scope: z.string().optional(),
    })
    .transform((data) => ({
      token: data['token'],
      expiresIn: data['expiresIn'],
      scope: data['scope'],
    }));
});
