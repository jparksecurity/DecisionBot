// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse, RequestConfig } from '../../http/types';
import { RequestBuilder } from '../../http/transport/request-builder';
import { SerializationStyle } from '../../http/serialization/base-serializer';
import { ThrowableError } from '../../http/errors/throwable-error';
import { Environment } from '../../http/environment';
import { AuthAccessTokenRequest, authAccessTokenRequestRequest } from './models/auth-access-token-request';
import { AuthAccessTokenResponse, authAccessTokenResponseResponse } from './models/auth-access-token-response';
import { RpcStatus } from '../common/rpc-status';
import { AuthApiKeyRequest, authApiKeyRequestRequest } from './models/auth-api-key-request';
import { AuthApiKeyResponse, authApiKeyResponseResponse } from './models/auth-api-key-response';
import { AuthTokenRequest, authTokenRequestRequest } from './models/auth-token-request';
import { AuthAuthenticationResponse, authAuthenticationResponseResponse } from './models/auth-authentication-response';
import { TodoClientNonce, todoClientNonceRequest } from './models/todo-client-nonce';
import { AuthSignInResponse, authSignInResponseResponse } from './models/auth-sign-in-response';
import { CommonGenericResponse, commonGenericResponseResponse } from '../common/common-generic-response';
import { AuthLoginChallengeResponse, authLoginChallengeResponseResponse } from './models/auth-login-challenge-response';
import { AuthSkipLoginParams } from './request-params';

export class AuthService extends BaseService {
  /**
   * Exchange an API key for an oAuth2 access token
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<AuthAccessTokenResponse>>} A successful response.
   */
  async authRequestAccessToken(
    body: AuthAccessTokenRequest,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<AuthAccessTokenResponse | AuthAccessTokenResponse>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('POST')
      .setPath('/access_token')
      .setRequestSchema(authAccessTokenRequestRequest)
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey)
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: authAccessTokenResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addResponse({
        schema: authAccessTokenResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addHeaderParam({ key: 'Content-Type', value: 'application/json' })
      .addBody(body)
      .build();
    return this.client.call<AuthAccessTokenResponse | AuthAccessTokenResponse>(request);
  }

  /**
   * Exchange the OTP code for an API key that could be used for authentication
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<AuthApiKeyResponse>>} A successful response.
   */
  async authRequestApiKey(
    body: AuthApiKeyRequest,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<AuthApiKeyResponse | AuthApiKeyResponse>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('POST')
      .setPath('/api_key')
      .setRequestSchema(authApiKeyRequestRequest)
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey)
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: authApiKeyResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addResponse({
        schema: authApiKeyResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addHeaderParam({ key: 'Content-Type', value: 'application/json' })
      .addBody(body)
      .build();
    return this.client.call<AuthApiKeyResponse | AuthApiKeyResponse>(request);
  }

  /**
   * Validate the OTP code to authenticate the user
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<AuthAuthenticationResponse>>} A successful response.
   */
  async authAuthenticate(
    body: AuthTokenRequest,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<AuthAuthenticationResponse | AuthAuthenticationResponse>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('POST')
      .setPath('/authenticate')
      .setRequestSchema(authTokenRequestRequest)
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey)
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: authAuthenticationResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addResponse({
        schema: authAuthenticationResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addHeaderParam({ key: 'Content-Type', value: 'application/json' })
      .addBody(body)
      .build();
    return this.client.call<AuthAuthenticationResponse | AuthAuthenticationResponse>(request);
  }

  /**
   * Require an email with an OTP code that could be used to obtain an ID token
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<AuthSignInResponse>>} A successful response.
   */
  async authRequestSignInCode(
    body: TodoClientNonce,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<AuthSignInResponse | AuthSignInResponse>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('POST')
      .setPath('/signin')
      .setRequestSchema(todoClientNonceRequest)
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey)
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: authSignInResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addResponse({
        schema: authSignInResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addHeaderParam({ key: 'Content-Type', value: 'application/json' })
      .addBody(body)
      .build();
    return this.client.call<AuthSignInResponse | AuthSignInResponse>(request);
  }

  /**
   * Log out current user and invalidates token
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<CommonGenericResponse>>} A successful response.
   */
  async authSignOut(
    body: any,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CommonGenericResponse | CommonGenericResponse>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('POST')
      .setPath('/signout')
      .setRequestSchema(z.any())
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey, 'BearerAuth')
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: commonGenericResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addResponse({
        schema: commonGenericResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addHeaderParam({ key: 'Content-Type', value: 'application/json' })
      .addBody(body)
      .build();
    return this.client.call<CommonGenericResponse | CommonGenericResponse>(request);
  }

  /**
   * Check if the user is already logged in, if the user can skip login a redirect url is returned
   * @param {string} [params.loginChallenge] -
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<AuthLoginChallengeResponse>>} A successful response.
   */
  async authSkipLogin(
    params?: AuthSkipLoginParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<AuthLoginChallengeResponse | AuthLoginChallengeResponse>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/skip')
      .setRequestSchema(z.any())
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey)
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: authLoginChallengeResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addResponse({
        schema: authLoginChallengeResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'loginChallenge',
        value: params?.loginChallenge,
      })
      .build();
    return this.client.call<AuthLoginChallengeResponse | AuthLoginChallengeResponse>(request);
  }
}
