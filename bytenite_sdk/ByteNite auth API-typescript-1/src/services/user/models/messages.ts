// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { CommonRole, commonRole } from './common-role';
import {
  AuthContactInfo,
  authContactInfo,
  authContactInfoRequest,
  authContactInfoResponse,
} from '../../common/auth-contact-info';

/**
 * The shape of the model inside the application code - what the users use
 */
export const messages = z.lazy(() => {
  return z.object({
    id: z.string().optional(),
    createdAt: z.string().optional(),
    lastLogin: z.string().optional(),
    displayName: z.string().optional(),
    email: z.string().optional(),
    photoUrl: z.string().optional(),
    providerId: z.string().optional(),
    emailVerified: z.boolean().optional(),
    customClaims: z.any().optional(),
    role: commonRole.optional(),
    firstName: z.string().optional(),
    lastName: z.string().optional(),
    contactInfo: authContactInfo.optional(),
  });
});

/**
 *
 * @typedef  {Messages} messages
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {boolean}
 * @property {any}
 * @property {CommonRole}
 * @property {string}
 * @property {string}
 * @property {AuthContactInfo}
 */
export type Messages = z.infer<typeof messages>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const messagesResponse = z.lazy(() => {
  return z
    .object({
      id: z.string().optional(),
      createdAt: z.string().optional(),
      lastLogin: z.string().optional(),
      displayName: z.string().optional(),
      email: z.string().optional(),
      photoUrl: z.string().optional(),
      providerId: z.string().optional(),
      emailVerified: z.boolean().optional(),
      customClaims: z.any().optional(),
      role: commonRole.optional(),
      firstName: z.string().optional(),
      lastName: z.string().optional(),
      contactInfo: authContactInfoResponse.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      createdAt: data['createdAt'],
      lastLogin: data['lastLogin'],
      displayName: data['displayName'],
      email: data['email'],
      photoUrl: data['photoUrl'],
      providerId: data['providerId'],
      emailVerified: data['emailVerified'],
      customClaims: data['customClaims'],
      role: data['role'],
      firstName: data['firstName'],
      lastName: data['lastName'],
      contactInfo: data['contactInfo'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const messagesRequest = z.lazy(() => {
  return z
    .object({
      id: z.string().optional(),
      createdAt: z.string().optional(),
      lastLogin: z.string().optional(),
      displayName: z.string().optional(),
      email: z.string().optional(),
      photoUrl: z.string().optional(),
      providerId: z.string().optional(),
      emailVerified: z.boolean().optional(),
      customClaims: z.any().optional(),
      role: commonRole.optional(),
      firstName: z.string().optional(),
      lastName: z.string().optional(),
      contactInfo: authContactInfoRequest.optional(),
    })
    .transform((data) => ({
      id: data['id'],
      createdAt: data['createdAt'],
      lastLogin: data['lastLogin'],
      displayName: data['displayName'],
      email: data['email'],
      photoUrl: data['photoUrl'],
      providerId: data['providerId'],
      emailVerified: data['emailVerified'],
      customClaims: data['customClaims'],
      role: data['role'],
      firstName: data['firstName'],
      lastName: data['lastName'],
      contactInfo: data['contactInfo'],
    }));
});
