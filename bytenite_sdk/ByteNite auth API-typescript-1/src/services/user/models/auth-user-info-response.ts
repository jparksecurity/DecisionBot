// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { Messages, messages, messagesRequest, messagesResponse } from './messages';

/**
 * The shape of the model inside the application code - what the users use
 */
export const authUserInfoResponse = z.lazy(() => {
  return z.object({
    user: messages.optional(),
  });
});

/**
 *
 * @typedef  {AuthUserInfoResponse} authUserInfoResponse
 * @property {Messages}
 */
export type AuthUserInfoResponse = z.infer<typeof authUserInfoResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const authUserInfoResponseResponse = z.lazy(() => {
  return z
    .object({
      user: messagesResponse.optional(),
    })
    .transform((data) => ({
      user: data['user'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const authUserInfoResponseRequest = z.lazy(() => {
  return z
    .object({
      user: messagesRequest.optional(),
    })
    .transform((data) => ({
      user: data['user'],
    }));
});
