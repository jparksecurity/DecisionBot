// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  AuthContactInfo,
  authContactInfo,
  authContactInfoRequest,
  authContactInfoResponse,
} from '../../common/auth-contact-info';

/**
 * The shape of the model inside the application code - what the users use
 */
export const authSetUserInfoRequest = z.lazy(() => {
  return z.object({
    contactInfo: authContactInfo.optional(),
    firstName: z.string().optional(),
    lastName: z.string().optional(),
  });
});

/**
 *
 * @typedef  {AuthSetUserInfoRequest} authSetUserInfoRequest
 * @property {AuthContactInfo}
 * @property {string}
 * @property {string}
 */
export type AuthSetUserInfoRequest = z.infer<typeof authSetUserInfoRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const authSetUserInfoRequestResponse = z.lazy(() => {
  return z
    .object({
      contactInfo: authContactInfoResponse.optional(),
      firstName: z.string().optional(),
      lastName: z.string().optional(),
    })
    .transform((data) => ({
      contactInfo: data['contactInfo'],
      firstName: data['firstName'],
      lastName: data['lastName'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const authSetUserInfoRequestRequest = z.lazy(() => {
  return z
    .object({
      contactInfo: authContactInfoRequest.optional(),
      firstName: z.string().optional(),
      lastName: z.string().optional(),
    })
    .transform((data) => ({
      contactInfo: data['contactInfo'],
      firstName: data['firstName'],
      lastName: data['lastName'],
    }));
});
