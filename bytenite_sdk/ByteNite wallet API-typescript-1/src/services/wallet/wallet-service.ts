// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse, RequestConfig } from '../../http/types';
import { RequestBuilder } from '../../http/transport/request-builder';
import { SerializationStyle } from '../../http/serialization/base-serializer';
import { ThrowableError } from '../../http/errors/throwable-error';
import { Environment } from '../../http/environment';
import { WalletAccountResponse, walletAccountResponseResponse } from './models/wallet-account-response';
import { RpcStatus } from './models/rpc-status';
import { WalletGetBalanceResponse, walletGetBalanceResponseResponse } from './models/wallet-get-balance-response';
import {
  WalletGeneratePayoutPortalLinkResponse,
  walletGeneratePayoutPortalLinkResponseResponse,
} from './models/wallet-generate-payout-portal-link-response';
import {
  WalletApiCancelTopUpRequestParams,
  walletApiCancelTopUpRequestParamsRequest,
} from './models/wallet-api-cancel-top-up-request-params';
import { CommonGenericResponse, commonGenericResponseResponse } from './models/common-generic-response';
import { ResponseMessages, responseMessagesResponse } from './models/response-messages';
import {
  WalletGetExchangeRateParams,
  WalletGetTransactionListParams,
  WalletPayoutHistoryParams,
} from './request-params';
import { WalletPayoutRequest, walletPayoutRequestRequest } from './models/wallet-payout-request';
import {
  WalletRequirePayoutResponse,
  walletRequirePayoutResponseResponse,
} from './models/wallet-require-payout-response';
import {
  WalletPayoutRequestFilterResponse,
  walletPayoutRequestFilterResponseResponse,
} from './models/wallet-payout-request-filter-response';
import { WalletListPlansResponse, walletListPlansResponseResponse } from './models/wallet-list-plans-response';
import {
  BytenitewalletApiRedeemCouponRequest,
  bytenitewalletApiRedeemCouponRequestRequest,
} from './models/bytenitewallet-api-redeem-coupon-request';
import {
  WalletApiRedeemCouponResponse,
  walletApiRedeemCouponResponseResponse,
} from './models/wallet-api-redeem-coupon-response';
import {
  WalletApiTopUpRequestParams,
  walletApiTopUpRequestParamsRequest,
} from './models/wallet-api-top-up-request-params';
import { WalletTopUpResponse, walletTopUpResponseResponse } from './models/wallet-top-up-response';
import {
  WalletTransactionHistoryResponse,
  walletTransactionHistoryResponseResponse,
} from './models/wallet-transaction-history-response';
import {
  WalletTransactionHistoryCsvResponse,
  walletTransactionHistoryCsvResponseResponse,
} from './models/wallet-transaction-history-csv-response';
import {
  WalletApiGetAllTransactionsRequest,
  walletApiGetAllTransactionsRequestRequest,
} from './models/wallet-api-get-all-transactions-request';

export class WalletService extends BaseService {
  /**
   * Get account info for current user
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<WalletAccountResponse>>} A successful response.
   */
  async walletGetAccountInfo(
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<WalletAccountResponse | WalletAccountResponse>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/account')
      .setRequestSchema(z.any())
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey)
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: walletAccountResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addResponse({
        schema: walletAccountResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .build();
    return this.client.call<WalletAccountResponse | WalletAccountResponse>(request);
  }

  /**
   * Get wallet balance for current user
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<WalletGetBalanceResponse>>} A successful response.
   */
  async walletGetBalance(
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<WalletGetBalanceResponse | WalletGetBalanceResponse>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/balance')
      .setRequestSchema(z.any())
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey)
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: walletGetBalanceResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addResponse({
        schema: walletGetBalanceResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .build();
    return this.client.call<WalletGetBalanceResponse | WalletGetBalanceResponse>(request);
  }

  /**
   * Generate a URL to the billing portal
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<WalletGeneratePayoutPortalLinkResponse>>} A successful response.
   */
  async walletGenerateBillingPortal(
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<WalletGeneratePayoutPortalLinkResponse | WalletGeneratePayoutPortalLinkResponse>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/billing_portal')
      .setRequestSchema(z.any())
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey)
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: walletGeneratePayoutPortalLinkResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addResponse({
        schema: walletGeneratePayoutPortalLinkResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .build();
    return this.client.call<WalletGeneratePayoutPortalLinkResponse | WalletGeneratePayoutPortalLinkResponse>(request);
  }

  /**
   * Cancel a top up request and update state
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<CommonGenericResponse>>} A successful response.
   */
  async walletCancelTopUpRequest(
    body: WalletApiCancelTopUpRequestParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CommonGenericResponse | CommonGenericResponse>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('POST')
      .setPath('/cancel_top_up')
      .setRequestSchema(walletApiCancelTopUpRequestParamsRequest)
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey)
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: commonGenericResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addResponse({
        schema: commonGenericResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addHeaderParam({ key: 'Content-Type', value: 'application/json' })
      .addBody(body)
      .build();
    return this.client.call<CommonGenericResponse | CommonGenericResponse>(request);
  }

  /**
   * Convert amount from currency to ByteChips
   * @param {string} [params.currency] -
   * @param {number} [params.currencyAmount] -
   * @param {number} [params.amount] -
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<ResponseMessages>>} A successful response.
   */
  async walletGetExchangeRate(
    params?: WalletGetExchangeRateParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<ResponseMessages | ResponseMessages>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/exchange_rate')
      .setRequestSchema(z.any())
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey)
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: responseMessagesResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addResponse({
        schema: responseMessagesResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'currency',
        value: params?.currency,
      })
      .addQueryParam({
        key: 'currencyAmount',
        value: params?.currencyAmount,
      })
      .addQueryParam({
        key: 'amount',
        value: params?.amount,
      })
      .build();
    return this.client.call<ResponseMessages | ResponseMessages>(request);
  }

  /**
   * Require a cash payout or swap credit for prizes
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<WalletRequirePayoutResponse>>} A successful response.
   */
  async walletRequirePayout(
    body: WalletPayoutRequest,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<WalletRequirePayoutResponse | WalletRequirePayoutResponse>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('POST')
      .setPath('/payout')
      .setRequestSchema(walletPayoutRequestRequest)
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey)
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: walletRequirePayoutResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addResponse({
        schema: walletRequirePayoutResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addHeaderParam({ key: 'Content-Type', value: 'application/json' })
      .addBody(body)
      .build();
    return this.client.call<WalletRequirePayoutResponse | WalletRequirePayoutResponse>(request);
  }

  /**
   * Retrieve paginated payout history for current user
   * @param {number} [params.limit] - Number of rows to return per page.
   * @param {number} [params.offset] - Number of rows to skip before starting to collect the result set.
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<WalletPayoutRequestFilterResponse>>} A successful response.
   */
  async walletPayoutHistory(
    params?: WalletPayoutHistoryParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<WalletPayoutRequestFilterResponse | WalletPayoutRequestFilterResponse>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/payout_history')
      .setRequestSchema(z.any())
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey)
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: walletPayoutRequestFilterResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addResponse({
        schema: walletPayoutRequestFilterResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'limit',
        value: params?.limit,
      })
      .addQueryParam({
        key: 'offset',
        value: params?.offset,
      })
      .build();
    return this.client.call<WalletPayoutRequestFilterResponse | WalletPayoutRequestFilterResponse>(request);
  }

  /**
   * Retrieve all available plans. **Deprecated**: This endpoint will be removed in future versions.
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<WalletListPlansResponse>>} A successful response.
   */
  async walletGetPlans(
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<WalletListPlansResponse | WalletListPlansResponse>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/plans')
      .setRequestSchema(z.any())
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey)
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: walletListPlansResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addResponse({
        schema: walletListPlansResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .build();
    return this.client.call<WalletListPlansResponse | WalletListPlansResponse>(request);
  }

  /**
   * Redeem a promo code
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<WalletApiRedeemCouponResponse>>} A successful response.
   */
  async walletRedeemCoupon(
    body: BytenitewalletApiRedeemCouponRequest,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<WalletApiRedeemCouponResponse | WalletApiRedeemCouponResponse>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('POST')
      .setPath('/redeem_coupon')
      .setRequestSchema(bytenitewalletApiRedeemCouponRequestRequest)
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey)
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: walletApiRedeemCouponResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addResponse({
        schema: walletApiRedeemCouponResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addHeaderParam({ key: 'Content-Type', value: 'application/json' })
      .addBody(body)
      .build();
    return this.client.call<WalletApiRedeemCouponResponse | WalletApiRedeemCouponResponse>(request);
  }

  /**
   * Create a top up request and get the payment code
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<WalletTopUpResponse>>} A successful response.
   */
  async walletCreateTopUpRequest(
    body: WalletApiTopUpRequestParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<WalletTopUpResponse | WalletTopUpResponse>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('POST')
      .setPath('/top_up')
      .setRequestSchema(walletApiTopUpRequestParamsRequest)
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey)
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: walletTopUpResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addResponse({
        schema: walletTopUpResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addHeaderParam({ key: 'Content-Type', value: 'application/json' })
      .addBody(body)
      .build();
    return this.client.call<WalletTopUpResponse | WalletTopUpResponse>(request);
  }

  /**
   * Get paginated list of transactions
   * @param {number} [params.paginationLimit] - Number of rows to return per page.
   * @param {number} [params.paginationOffset] - Number of rows to skip before starting to collect the result set.
   * @param {string} [params.orderBy] -
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<WalletTransactionHistoryResponse>>} A successful response.
   */
  async walletGetTransactionList(
    params?: WalletGetTransactionListParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<WalletTransactionHistoryResponse | WalletTransactionHistoryResponse>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/transactions')
      .setRequestSchema(z.any())
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey)
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: walletTransactionHistoryResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addResponse({
        schema: walletTransactionHistoryResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addQueryParam({
        key: 'pagination.limit',
        value: params?.paginationLimit,
      })
      .addQueryParam({
        key: 'pagination.offset',
        value: params?.paginationOffset,
      })
      .addQueryParam({
        key: 'orderBy',
        value: params?.orderBy,
      })
      .build();
    return this.client.call<WalletTransactionHistoryResponse | WalletTransactionHistoryResponse>(request);
  }

  /**
   * Get CSV of all transactions
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<WalletTransactionHistoryCsvResponse>>} A successful response.
   */
  async walletGetTransactionsCsv(
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<WalletTransactionHistoryCsvResponse | WalletTransactionHistoryCsvResponse>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('GET')
      .setPath('/transactions/csv')
      .setRequestSchema(z.any())
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey)
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: walletTransactionHistoryCsvResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addResponse({
        schema: walletTransactionHistoryCsvResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .build();
    return this.client.call<WalletTransactionHistoryCsvResponse | WalletTransactionHistoryCsvResponse>(request);
  }

  /**
   * post paginated list of transactions with filters
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<WalletTransactionHistoryResponse>>} A successful response.
   */
  async walletPostTransactionListFilter(
    body: WalletApiGetAllTransactionsRequest,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<WalletTransactionHistoryResponse | WalletTransactionHistoryResponse>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('POST')
      .setPath('/transactions/filter')
      .setRequestSchema(walletApiGetAllTransactionsRequestRequest)
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey)
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: walletTransactionHistoryResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addResponse({
        schema: walletTransactionHistoryResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .addHeaderParam({ key: 'Content-Type', value: 'application/json' })
      .addBody(body)
      .build();
    return this.client.call<WalletTransactionHistoryResponse | WalletTransactionHistoryResponse>(request);
  }

  /**
   * Forcefully monthly recover balance
   * @param {RequestConfig} requestConfig - (Optional) The request configuration for retry and validation.
   * @returns {Promise<HttpResponse<CommonGenericResponse>>} A successful response.
   */
  async walletForcefulBalanceRecovery(
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<CommonGenericResponse | CommonGenericResponse>> {
    const request = new RequestBuilder()
      .setBaseUrl(requestConfig?.baseUrl || this.config.baseUrl || this.config.environment || Environment.DEFAULT)
      .setConfig(this.config)
      .setMethod('POST')
      .setPath('/triggers/forceful_balance_recovery')
      .setRequestSchema(z.any())
      .addAccessTokenAuth(this.config.token, 'Bearer')
      .addApiKeyAuth(this.config.apiKey)
      .setRequestContentType(ContentType.Json)
      .addResponse({
        schema: commonGenericResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addResponse({
        schema: commonGenericResponseResponse,
        contentType: ContentType.Json,
        status: 200,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 400,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 401,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 403,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 404,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 500,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .addError({
        error: ThrowableError,
        contentType: ContentType.Json,
        status: 503,
      })
      .setRetryAttempts(this.config, requestConfig)
      .setRetryDelayMs(this.config, requestConfig)
      .setResponseValidation(this.config, requestConfig)
      .build();
    return this.client.call<CommonGenericResponse | CommonGenericResponse>(request);
  }
}
