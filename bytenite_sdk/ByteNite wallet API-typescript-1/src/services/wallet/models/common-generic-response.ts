// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { CommonError, commonError, commonErrorRequest, commonErrorResponse } from './common-error';

/**
 * The shape of the model inside the application code - what the users use
 */
export const commonGenericResponse = z.lazy(() => {
  return z.object({
    ok: z.boolean().optional(),
    requestId: z.string().optional(),
    message: z.string().optional(),
    error: commonError.optional(),
  });
});

/**
 *
 * @typedef  {CommonGenericResponse} commonGenericResponse
 * @property {boolean} - True if the request was successful.
 * @property {string} - Internal request identifier for tracing or support.
 * @property {string} - Additional message providing status or context.
 * @property {CommonError}
 */
export type CommonGenericResponse = z.infer<typeof commonGenericResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const commonGenericResponseResponse = z.lazy(() => {
  return z
    .object({
      ok: z.boolean().optional(),
      requestId: z.string().optional(),
      message: z.string().optional(),
      error: commonErrorResponse.optional(),
    })
    .transform((data) => ({
      ok: data['ok'],
      requestId: data['requestId'],
      message: data['message'],
      error: data['error'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const commonGenericResponseRequest = z.lazy(() => {
  return z
    .object({
      ok: z.boolean().optional(),
      requestId: z.string().optional(),
      message: z.string().optional(),
      error: commonErrorRequest.optional(),
    })
    .transform((data) => ({
      ok: data['ok'],
      requestId: data['requestId'],
      message: data['message'],
      error: data['error'],
    }));
});
