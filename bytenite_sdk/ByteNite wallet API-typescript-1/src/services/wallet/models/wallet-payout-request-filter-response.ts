// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  WalletPayoutRequest,
  walletPayoutRequest,
  walletPayoutRequestRequest,
  walletPayoutRequestResponse,
} from './wallet-payout-request';

/**
 * The shape of the model inside the application code - what the users use
 */
export const walletPayoutRequestFilterResponse = z.lazy(() => {
  return z.object({
    accountId: z.string().optional(),
    payoutRequests: z.array(walletPayoutRequest).optional(),
  });
});

/**
 *
 * @typedef  {WalletPayoutRequestFilterResponse} walletPayoutRequestFilterResponse
 * @property {string}
 * @property {WalletPayoutRequest[]}
 */
export type WalletPayoutRequestFilterResponse = z.infer<typeof walletPayoutRequestFilterResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const walletPayoutRequestFilterResponseResponse = z.lazy(() => {
  return z
    .object({
      accountId: z.string().optional(),
      payoutRequests: z.array(walletPayoutRequestResponse).optional(),
    })
    .transform((data) => ({
      accountId: data['accountId'],
      payoutRequests: data['payoutRequests'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const walletPayoutRequestFilterResponseRequest = z.lazy(() => {
  return z
    .object({
      accountId: z.string().optional(),
      payoutRequests: z.array(walletPayoutRequestRequest).optional(),
    })
    .transform((data) => ({
      accountId: data['accountId'],
      payoutRequests: data['payoutRequests'],
    }));
});
