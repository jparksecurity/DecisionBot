// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { WalletPlan, walletPlan, walletPlanRequest, walletPlanResponse } from './wallet-plan';

/**
 * The shape of the model inside the application code - what the users use
 */
export const walletListPlansResponse = z.lazy(() => {
  return z.object({
    plans: z.array(walletPlan).optional(),
  });
});

/**
 *
 * @typedef  {WalletListPlansResponse} walletListPlansResponse
 * @property {WalletPlan[]}
 */
export type WalletListPlansResponse = z.infer<typeof walletListPlansResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const walletListPlansResponseResponse = z.lazy(() => {
  return z
    .object({
      plans: z.array(walletPlanResponse).optional(),
    })
    .transform((data) => ({
      plans: data['plans'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const walletListPlansResponseRequest = z.lazy(() => {
  return z
    .object({
      plans: z.array(walletPlanRequest).optional(),
    })
    .transform((data) => ({
      plans: data['plans'],
    }));
});
