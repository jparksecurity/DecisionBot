// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const responseMessages = z.lazy(() => {
  return z.object({
    currency: z.string().optional(),
    currencyAmount: z.number().optional(),
    exchangeRate: z.number().optional(),
    amount: z.number().optional(),
  });
});

/**
 *
 * @typedef  {ResponseMessages} responseMessages
 * @property {string}
 * @property {number}
 * @property {number}
 * @property {number}
 */
export type ResponseMessages = z.infer<typeof responseMessages>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const responseMessagesResponse = z.lazy(() => {
  return z
    .object({
      currency: z.string().optional(),
      currencyAmount: z.number().optional(),
      exchangeRate: z.number().optional(),
      amount: z.number().optional(),
    })
    .transform((data) => ({
      currency: data['currency'],
      currencyAmount: data['currencyAmount'],
      exchangeRate: data['exchangeRate'],
      amount: data['amount'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const responseMessagesRequest = z.lazy(() => {
  return z
    .object({
      currency: z.string().optional(),
      currencyAmount: z.number().optional(),
      exchangeRate: z.number().optional(),
      amount: z.number().optional(),
    })
    .transform((data) => ({
      currency: data['currency'],
      currencyAmount: data['currencyAmount'],
      exchangeRate: data['exchangeRate'],
      amount: data['amount'],
    }));
});
