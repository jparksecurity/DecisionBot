// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const dataStructures = z.lazy(() => {
  return z.object({
    id: z.string().optional(),
    createdAt: z.string().optional(),
    updatedAt: z.string().optional(),
    ownerId: z.string().optional(),
    accountType: z.string().optional(),
    verified: z.boolean().optional(),
    serviceAccount: z.boolean().optional(),
    payments: z.boolean().optional(),
    payouts: z.boolean().optional(),
    name: z.string().optional(),
    email: z.string().optional(),
    tier: z.number().optional(),
    revenueShare: z.number().optional(),
    gracePeriodEndAt: z.string().optional(),
    numberOfAppsAllowed: z.number().optional(),
    externalId: z.string().optional(),
  });
});

/**
 *
 * @typedef  {DataStructures} dataStructures
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {boolean}
 * @property {boolean}
 * @property {boolean}
 * @property {boolean}
 * @property {string}
 * @property {string}
 * @property {number}
 * @property {number}
 * @property {string}
 * @property {number}
 * @property {string}
 */
export type DataStructures = z.infer<typeof dataStructures>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const dataStructuresResponse = z.lazy(() => {
  return z
    .object({
      id: z.string().optional(),
      createdAt: z.string().optional(),
      updatedAt: z.string().optional(),
      ownerId: z.string().optional(),
      accountType: z.string().optional(),
      verified: z.boolean().optional(),
      serviceAccount: z.boolean().optional(),
      payments: z.boolean().optional(),
      payouts: z.boolean().optional(),
      name: z.string().optional(),
      email: z.string().optional(),
      tier: z.number().optional(),
      revenueShare: z.number().optional(),
      gracePeriodEndAt: z.string().optional(),
      numberOfAppsAllowed: z.number().optional(),
      externalId: z.string().optional(),
    })
    .transform((data) => ({
      id: data['id'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      ownerId: data['ownerId'],
      accountType: data['accountType'],
      verified: data['verified'],
      serviceAccount: data['serviceAccount'],
      payments: data['payments'],
      payouts: data['payouts'],
      name: data['name'],
      email: data['email'],
      tier: data['tier'],
      revenueShare: data['revenueShare'],
      gracePeriodEndAt: data['gracePeriodEndAt'],
      numberOfAppsAllowed: data['numberOfAppsAllowed'],
      externalId: data['externalId'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const dataStructuresRequest = z.lazy(() => {
  return z
    .object({
      id: z.string().optional(),
      createdAt: z.string().optional(),
      updatedAt: z.string().optional(),
      ownerId: z.string().optional(),
      accountType: z.string().optional(),
      verified: z.boolean().optional(),
      serviceAccount: z.boolean().optional(),
      payments: z.boolean().optional(),
      payouts: z.boolean().optional(),
      name: z.string().optional(),
      email: z.string().optional(),
      tier: z.number().optional(),
      revenueShare: z.number().optional(),
      gracePeriodEndAt: z.string().optional(),
      numberOfAppsAllowed: z.number().optional(),
      externalId: z.string().optional(),
    })
    .transform((data) => ({
      id: data['id'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      ownerId: data['ownerId'],
      accountType: data['accountType'],
      verified: data['verified'],
      serviceAccount: data['serviceAccount'],
      payments: data['payments'],
      payouts: data['payouts'],
      name: data['name'],
      email: data['email'],
      tier: data['tier'],
      revenueShare: data['revenueShare'],
      gracePeriodEndAt: data['gracePeriodEndAt'],
      numberOfAppsAllowed: data['numberOfAppsAllowed'],
      externalId: data['externalId'],
    }));
});
