// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const walletGetBalanceResponse = z.lazy(() => {
  return z.object({
    accountId: z.string().optional(),
    totalBalance: z.number().optional(),
    availableBalance: z.number().optional(),
    amountDue: z.number().optional(),
  });
});

/**
 *
 * @typedef  {WalletGetBalanceResponse} walletGetBalanceResponse
 * @property {string} - A unique identifier associated with your ByteNite wallet account, separate from your userId.
 * @property {number} - This represents the total amount of credits or funds available in your ByteNite wallet. This is the overall balance, including any funds that might be reserved or locked.
 * @property {number} - This is the portion of your total balance that is readily available for use. It excludes any funds that might be held for pending transactions or subscriptions.
 * @property {number} - This represents the dollar value equivalent to the pending ByteChips due at the end of the billing period.
 */
export type WalletGetBalanceResponse = z.infer<typeof walletGetBalanceResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const walletGetBalanceResponseResponse = z.lazy(() => {
  return z
    .object({
      accountId: z.string().optional(),
      totalBalance: z.number().optional(),
      availableBalance: z.number().optional(),
      amountDue: z.number().optional(),
    })
    .transform((data) => ({
      accountId: data['accountId'],
      totalBalance: data['totalBalance'],
      availableBalance: data['availableBalance'],
      amountDue: data['amountDue'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const walletGetBalanceResponseRequest = z.lazy(() => {
  return z
    .object({
      accountId: z.string().optional(),
      totalBalance: z.number().optional(),
      availableBalance: z.number().optional(),
      amountDue: z.number().optional(),
    })
    .transform((data) => ({
      accountId: data['accountId'],
      totalBalance: data['totalBalance'],
      availableBalance: data['availableBalance'],
      amountDue: data['amountDue'],
    }));
});
