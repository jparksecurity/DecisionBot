// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const commonEntity = z.lazy(() => {
  return z.object({
    type: z.string().optional(),
    id: z.string().optional(),
    name: z.string().optional(),
  });
});

/**
 * This message represents a generic entity with a type and an ID. It can be used to represent different types of entities in the system.
 * @typedef  {CommonEntity} commonEntity - This message represents a generic entity with a type and an ID. It can be used to represent different types of entities in the system. - This message represents a generic entity with a type and an ID. It can be used to represent different types of entities in the system.
 * @property {string} - The type of the entity. This is a string that represents the type of the entity, such as "user", "device", etc.
 * @property {string} - The unique identifier for the entity. This is a string that represents the unique identifier of the entity.
 * @property {string} - The name of the related entity.
 */
export type CommonEntity = z.infer<typeof commonEntity>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const commonEntityResponse = z.lazy(() => {
  return z
    .object({
      type: z.string().optional(),
      id: z.string().optional(),
      name: z.string().optional(),
    })
    .transform((data) => ({
      type: data['type'],
      id: data['id'],
      name: data['name'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const commonEntityRequest = z.lazy(() => {
  return z
    .object({
      type: z.string().optional(),
      id: z.string().optional(),
      name: z.string().optional(),
    })
    .transform((data) => ({
      type: data['type'],
      id: data['id'],
      name: data['name'],
    }));
});
