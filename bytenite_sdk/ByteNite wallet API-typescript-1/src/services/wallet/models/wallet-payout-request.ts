// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { TodoState, todoState } from './todo-state';

/**
 * The shape of the model inside the application code - what the users use
 */
export const walletPayoutRequest = z.lazy(() => {
  return z.object({
    id: z.string().optional(),
    createdAt: z.string().optional(),
    updatedAt: z.string().optional(),
    ownerId: z.string().optional(),
    accountId: z.string().optional(),
    payoutProfileId: z.string().optional(),
    amount: z.string().optional(),
    currency: z.string().optional(),
    currencyAmount: z.string().optional(),
    exchangeRate: z.string().optional(),
    state: todoState.optional(),
    sentAt: z.string().optional(),
    confirmedAt: z.string().optional(),
  });
});

/**
 *
 * @typedef  {WalletPayoutRequest} walletPayoutRequest
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {TodoState}
 * @property {string}
 * @property {string}
 */
export type WalletPayoutRequest = z.infer<typeof walletPayoutRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const walletPayoutRequestResponse = z.lazy(() => {
  return z
    .object({
      id: z.string().optional(),
      createdAt: z.string().optional(),
      updatedAt: z.string().optional(),
      ownerId: z.string().optional(),
      accountId: z.string().optional(),
      payoutProfileId: z.string().optional(),
      amount: z.string().optional(),
      currency: z.string().optional(),
      currencyAmount: z.string().optional(),
      exchangeRate: z.string().optional(),
      state: todoState.optional(),
      sentAt: z.string().optional(),
      confirmedAt: z.string().optional(),
    })
    .transform((data) => ({
      id: data['id'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      ownerId: data['ownerId'],
      accountId: data['accountId'],
      payoutProfileId: data['payoutProfileId'],
      amount: data['amount'],
      currency: data['currency'],
      currencyAmount: data['currencyAmount'],
      exchangeRate: data['exchangeRate'],
      state: data['state'],
      sentAt: data['sentAt'],
      confirmedAt: data['confirmedAt'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const walletPayoutRequestRequest = z.lazy(() => {
  return z
    .object({
      id: z.string().optional(),
      createdAt: z.string().optional(),
      updatedAt: z.string().optional(),
      ownerId: z.string().optional(),
      accountId: z.string().optional(),
      payoutProfileId: z.string().optional(),
      amount: z.string().optional(),
      currency: z.string().optional(),
      currencyAmount: z.string().optional(),
      exchangeRate: z.string().optional(),
      state: todoState.optional(),
      sentAt: z.string().optional(),
      confirmedAt: z.string().optional(),
    })
    .transform((data) => ({
      id: data['id'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      ownerId: data['ownerId'],
      accountId: data['accountId'],
      payoutProfileId: data['payoutProfileId'],
      amount: data['amount'],
      currency: data['currency'],
      currencyAmount: data['currencyAmount'],
      exchangeRate: data['exchangeRate'],
      state: data['state'],
      sentAt: data['sentAt'],
      confirmedAt: data['confirmedAt'],
    }));
});
