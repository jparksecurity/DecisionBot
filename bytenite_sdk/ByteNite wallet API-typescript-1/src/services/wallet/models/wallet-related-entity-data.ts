// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const walletRelatedEntityData = z.lazy(() => {
  return z.object({
    type: z.string().optional(),
    id: z.string().optional(),
    name: z.string().optional(),
    jobName: z.string().optional(),
    jobId: z.string().optional(),
    description: z.string().optional(),
    currency: z.string().optional(),
    currencyAmount: z.string().optional(),
    exchangeRate: z.number().optional(),
    couponCode: z.string().optional(),
    jobTemplate: z.string().optional(),
  });
});

/**
 *
 * @typedef  {WalletRelatedEntityData} walletRelatedEntityData
 * @property {string} - The type of related entity.
 * @property {string} - The unique identifier for the related entity.
 * @property {string} - The name of the related entity.
 * @property {string} - For type = payment, The name of the job associated with the payment.
 * @property {string} - The ID of the job associated with the payment.
 * @property {string} - For type = topup, A description of the top-up transaction.
 * @property {string} - The currency used in the top-up.
 * @property {string} - The amount in the specified currency.
 * @property {number} - The exchange rate applied to the transaction.
 * @property {string} - For type = coupon, The coupon code applied to the transaction.
 * @property {string} - The job template id associated with the corresponding job.
 */
export type WalletRelatedEntityData = z.infer<typeof walletRelatedEntityData>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const walletRelatedEntityDataResponse = z.lazy(() => {
  return z
    .object({
      type: z.string().optional(),
      id: z.string().optional(),
      name: z.string().optional(),
      jobName: z.string().optional(),
      jobId: z.string().optional(),
      description: z.string().optional(),
      currency: z.string().optional(),
      currencyAmount: z.string().optional(),
      exchangeRate: z.number().optional(),
      couponCode: z.string().optional(),
      jobTemplate: z.string().optional(),
    })
    .transform((data) => ({
      type: data['type'],
      id: data['id'],
      name: data['name'],
      jobName: data['jobName'],
      jobId: data['jobId'],
      description: data['description'],
      currency: data['currency'],
      currencyAmount: data['currencyAmount'],
      exchangeRate: data['exchangeRate'],
      couponCode: data['couponCode'],
      jobTemplate: data['jobTemplate'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const walletRelatedEntityDataRequest = z.lazy(() => {
  return z
    .object({
      type: z.string().optional(),
      id: z.string().optional(),
      name: z.string().optional(),
      jobName: z.string().optional(),
      jobId: z.string().optional(),
      description: z.string().optional(),
      currency: z.string().optional(),
      currencyAmount: z.string().optional(),
      exchangeRate: z.number().optional(),
      couponCode: z.string().optional(),
      jobTemplate: z.string().optional(),
    })
    .transform((data) => ({
      type: data['type'],
      id: data['id'],
      name: data['name'],
      jobName: data['jobName'],
      jobId: data['jobId'],
      description: data['description'],
      currency: data['currency'],
      currencyAmount: data['currencyAmount'],
      exchangeRate: data['exchangeRate'],
      couponCode: data['couponCode'],
      jobTemplate: data['jobTemplate'],
    }));
});
