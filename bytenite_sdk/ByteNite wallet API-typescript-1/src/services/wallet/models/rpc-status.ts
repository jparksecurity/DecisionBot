// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { ProtobufAny, protobufAny, protobufAnyRequest, protobufAnyResponse } from './protobuf-any';

/**
 * The shape of the model inside the application code - what the users use
 */
export const rpcStatus = z.lazy(() => {
  return z.object({
    code: z.number().optional(),
    message: z.string().optional(),
    details: z.array(protobufAny).optional(),
  });
});

/**
 *
 * @typedef  {RpcStatus} rpcStatus
 * @property {number}
 * @property {string}
 * @property {ProtobufAny[]}
 */
export type RpcStatus = z.infer<typeof rpcStatus>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const rpcStatusResponse = z.lazy(() => {
  return z
    .object({
      code: z.number().optional(),
      message: z.string().optional(),
      details: z.array(protobufAnyResponse).optional(),
    })
    .transform((data) => ({
      code: data['code'],
      message: data['message'],
      details: data['details'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const rpcStatusRequest = z.lazy(() => {
  return z
    .object({
      code: z.number().optional(),
      message: z.string().optional(),
      details: z.array(protobufAnyRequest).optional(),
    })
    .transform((data) => ({
      code: data['code'],
      message: data['message'],
      details: data['details'],
    }));
});
