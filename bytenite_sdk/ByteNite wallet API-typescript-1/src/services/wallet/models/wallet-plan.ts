// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { PlanPlanState, planPlanState } from './plan-plan-state';

/**
 * The shape of the model inside the application code - what the users use
 */
export const walletPlan = z.lazy(() => {
  return z.object({
    id: z.string().optional(),
    createdAt: z.string().optional(),
    updatedAt: z.string().optional(),
    state: planPlanState.optional(),
    amount: z.string().optional(),
  });
});

/**
 *
 * @typedef  {WalletPlan} walletPlan
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {PlanPlanState}
 * @property {string}
 */
export type WalletPlan = z.infer<typeof walletPlan>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const walletPlanResponse = z.lazy(() => {
  return z
    .object({
      id: z.string().optional(),
      createdAt: z.string().optional(),
      updatedAt: z.string().optional(),
      state: planPlanState.optional(),
      amount: z.string().optional(),
    })
    .transform((data) => ({
      id: data['id'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      state: data['state'],
      amount: data['amount'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const walletPlanRequest = z.lazy(() => {
  return z
    .object({
      id: z.string().optional(),
      createdAt: z.string().optional(),
      updatedAt: z.string().optional(),
      state: planPlanState.optional(),
      amount: z.string().optional(),
    })
    .transform((data) => ({
      id: data['id'],
      createdAt: data['createdAt'],
      updatedAt: data['updatedAt'],
      state: data['state'],
      amount: data['amount'],
    }));
});
