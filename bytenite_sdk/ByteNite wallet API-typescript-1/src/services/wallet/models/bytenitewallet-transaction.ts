// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { CommonEntity, commonEntity, commonEntityRequest, commonEntityResponse } from './common-entity';
import { ProtobufAny, protobufAny, protobufAnyRequest, protobufAnyResponse } from './protobuf-any';
import {
  WalletRelatedEntityData,
  walletRelatedEntityData,
  walletRelatedEntityDataRequest,
  walletRelatedEntityDataResponse,
} from './wallet-related-entity-data';

/**
 * The shape of the model inside the application code - what the users use
 */
export const bytenitewalletTransaction = z.lazy(() => {
  return z.object({
    id: z.string().optional(),
    createdAt: z.string().optional(),
    accountFrom: z.string().optional(),
    accountTo: z.string().optional(),
    amount: z.number().optional(),
    transactionType: z.string().optional(),
    relatedEntity: commonEntity.optional(),
    notes: z.string().optional(),
    transactionData: protobufAny.optional(),
    hash: z.string().optional(),
    relatedEntityData: walletRelatedEntityData.optional(),
    description: z.string().optional(),
    balance: z.number().optional(),
  });
});

/**
 *
 * @typedef  {BytenitewalletTransaction} bytenitewalletTransaction
 * @property {string} - A unique identifier for this specific transaction.
 * @property {string} - The date and time when the transaction was created.
 * @property {string} - The identifier of the account the transaction originated from.
 * @property {string} - The identifier of the account the transaction was sent to (e.g., stripe-main, our payment processor).
 * @property {number} - The cost in ByteChips of the transaction.
 * @property {string} - A classification of the transaction type.
 * @property {CommonEntity} - This message represents a generic entity with a type and an ID. It can be used to represent different types of entities in the system.
 * @property {string} - Any additional notes or comments related to the transaction.
 * @property {ProtobufAny}
 * @property {string} - A cryptographic hash of the transaction for security and verification.
 * @property {WalletRelatedEntityData}
 * @property {string} - A human-readable description of the transaction.
 * @property {number} - The remaining balance after the transaction.
 */
export type BytenitewalletTransaction = z.infer<typeof bytenitewalletTransaction>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const bytenitewalletTransactionResponse = z.lazy(() => {
  return z
    .object({
      id: z.string().optional(),
      createdAt: z.string().optional(),
      accountFrom: z.string().optional(),
      accountTo: z.string().optional(),
      amount: z.number().optional(),
      transactionType: z.string().optional(),
      relatedEntity: commonEntityResponse.optional(),
      notes: z.string().optional(),
      transactionData: protobufAnyResponse.optional(),
      hash: z.string().optional(),
      relatedEntityData: walletRelatedEntityDataResponse.optional(),
      description: z.string().optional(),
      balance: z.number().optional(),
    })
    .transform((data) => ({
      id: data['id'],
      createdAt: data['createdAt'],
      accountFrom: data['accountFrom'],
      accountTo: data['accountTo'],
      amount: data['amount'],
      transactionType: data['transactionType'],
      relatedEntity: data['relatedEntity'],
      notes: data['notes'],
      transactionData: data['transactionData'],
      hash: data['hash'],
      relatedEntityData: data['relatedEntityData'],
      description: data['description'],
      balance: data['balance'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const bytenitewalletTransactionRequest = z.lazy(() => {
  return z
    .object({
      id: z.string().optional(),
      createdAt: z.string().optional(),
      accountFrom: z.string().optional(),
      accountTo: z.string().optional(),
      amount: z.number().optional(),
      transactionType: z.string().optional(),
      relatedEntity: commonEntityRequest.optional(),
      notes: z.string().optional(),
      transactionData: protobufAnyRequest.optional(),
      hash: z.string().optional(),
      relatedEntityData: walletRelatedEntityDataRequest.optional(),
      description: z.string().optional(),
      balance: z.number().optional(),
    })
    .transform((data) => ({
      id: data['id'],
      createdAt: data['createdAt'],
      accountFrom: data['accountFrom'],
      accountTo: data['accountTo'],
      amount: data['amount'],
      transactionType: data['transactionType'],
      relatedEntity: data['relatedEntity'],
      notes: data['notes'],
      transactionData: data['transactionData'],
      hash: data['hash'],
      relatedEntityData: data['relatedEntityData'],
      description: data['description'],
      balance: data['balance'],
    }));
});
