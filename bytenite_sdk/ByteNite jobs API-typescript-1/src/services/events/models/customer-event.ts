// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { ProtobufAny, protobufAny, protobufAnyRequest, protobufAnyResponse } from '../../common/protobuf-any';

/**
 * The shape of the model inside the application code - what the users use
 */
export const customerEvent = z.lazy(() => {
  return z.object({
    event: z.string().optional(),
    data: protobufAny.optional(),
  });
});

/**
 *
 * @typedef  {CustomerEvent} customerEvent
 * @property {string}
 * @property {ProtobufAny}
 */
export type CustomerEvent = z.infer<typeof customerEvent>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const customerEventResponse = z.lazy(() => {
  return z
    .object({
      event: z.string().optional(),
      data: protobufAnyResponse.optional(),
    })
    .transform((data) => ({
      event: data['event'],
      data: data['data'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const customerEventRequest = z.lazy(() => {
  return z
    .object({
      event: z.string().optional(),
      data: protobufAnyRequest.optional(),
    })
    .transform((data) => ({
      event: data['event'],
      data: data['data'],
    }));
});
