// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { CustomerEvent, customerEvent, customerEventRequest, customerEventResponse } from './customer-event';
import { RpcStatus, rpcStatus, rpcStatusRequest, rpcStatusResponse } from '../../common/rpc-status';

/**
 * The shape of the model inside the application code - what the users use
 */
export const streamResultOfCustomerEvent = z.lazy(() => {
  return z.object({
    result: customerEvent.optional(),
    error: rpcStatus.optional(),
  });
});

/**
 *
 * @typedef  {StreamResultOfCustomerEvent} streamResultOfCustomerEvent
 * @property {CustomerEvent}
 * @property {RpcStatus}
 */
export type StreamResultOfCustomerEvent = z.infer<typeof streamResultOfCustomerEvent>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const streamResultOfCustomerEventResponse = z.lazy(() => {
  return z
    .object({
      result: customerEventResponse.optional(),
      error: rpcStatusResponse.optional(),
    })
    .transform((data) => ({
      result: data['result'],
      error: data['error'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const streamResultOfCustomerEventRequest = z.lazy(() => {
  return z
    .object({
      result: customerEventRequest.optional(),
      error: rpcStatusRequest.optional(),
    })
    .transform((data) => ({
      result: data['result'],
      error: data['error'],
    }));
});
