// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const commonVersion = z.lazy(() => {
  return z.object({
    major: z.number().optional(),
    minor: z.number().optional(),
    tag: z.string().optional(),
  });
});

/**
 * Version of the distributed app, including revision.
 * @typedef  {CommonVersion} commonVersion - Version of the distributed app, including revision. - Version of the distributed app, including revision.
 * @property {number}
 * @property {number}
 * @property {string}
 */
export type CommonVersion = z.infer<typeof commonVersion>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const commonVersionResponse = z.lazy(() => {
  return z
    .object({
      major: z.number().optional(),
      minor: z.number().optional(),
      tag: z.string().optional(),
    })
    .transform((data) => ({
      major: data['major'],
      minor: data['minor'],
      tag: data['tag'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const commonVersionRequest = z.lazy(() => {
  return z
    .object({
      major: z.number().optional(),
      minor: z.number().optional(),
      tag: z.string().optional(),
    })
    .transform((data) => ({
      major: data['major'],
      minor: data['minor'],
      tag: data['tag'],
    }));
});
