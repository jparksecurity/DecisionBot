// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { CommonVersion, commonVersion, commonVersionRequest, commonVersionResponse } from './common-version';

/**
 * The shape of the model inside the application code - what the users use
 */
export const bytenitecustomerServerInfoResponse = z.lazy(() => {
  return z.object({
    version: commonVersion.optional(),
    messages: z.any().optional(),
  });
});

/**
 *
 * @typedef  {BytenitecustomerServerInfoResponse} bytenitecustomerServerInfoResponse
 * @property {CommonVersion} - Version of the distributed app, including revision.
 * @property {any}
 */
export type BytenitecustomerServerInfoResponse = z.infer<typeof bytenitecustomerServerInfoResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const bytenitecustomerServerInfoResponseResponse = z.lazy(() => {
  return z
    .object({
      version: commonVersionResponse.optional(),
      messages: z.any().optional(),
    })
    .transform((data) => ({
      version: data['version'],
      messages: data['messages'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const bytenitecustomerServerInfoResponseRequest = z.lazy(() => {
  return z
    .object({
      version: commonVersionRequest.optional(),
      messages: z.any().optional(),
    })
    .transform((data) => ({
      version: data['version'],
      messages: data['messages'],
    }));
});
