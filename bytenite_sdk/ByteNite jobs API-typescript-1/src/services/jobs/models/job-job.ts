// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { JobJobConfig, jobJobConfig, jobJobConfigRequest, jobJobConfigResponse } from './job-job-config';
import { JobByteLevel, jobByteLevel } from './job-byte-level';
import {
  CommonSelectionList,
  commonSelectionList,
  commonSelectionListRequest,
  commonSelectionListResponse,
} from './common-selection-list';
import { JobJobState, jobJobState } from './job-job-state';
import {
  DataSourceDataSource,
  dataSourceDataSource,
  dataSourceDataSourceRequest,
  dataSourceDataSourceResponse,
} from './data-source-data-source';
import { JobAppParams, jobAppParams, jobAppParamsRequest, jobAppParamsResponse } from './job-app-params';

/**
 * The shape of the model inside the application code - what the users use
 */
export const jobJob = z.lazy(() => {
  return z.object({
    id: z.string().optional(),
    templateId: z.string().optional(),
    name: z.string().optional(),
    config: jobJobConfig.optional(),
    priority: jobByteLevel.optional(),
    startAt: z.string().optional(),
    submittedAt: z.string().optional(),
    startedAt: z.string().optional(),
    endedAt: z.string().optional(),
    regions: commonSelectionList.optional(),
    state: jobJobState.optional(),
    dataSource: dataSourceDataSource.optional(),
    params: jobAppParams.optional(),
    dataDestination: dataSourceDataSource.optional(),
    duration: z.number().optional(),
    deletedAt: z.string().optional(),
    createdAt: z.string().optional(),
    paymentAmount: z.number().optional(),
    numUnitsEstimation: z.string().optional(),
    numChunks: z.number().optional(),
    errorMessage: z.string().optional(),
    description: z.string().optional(),
    stateTimestamps: z.any().optional(),
    appId: z.string().optional(),
  });
});

/**
 * 
 * @typedef  {JobJob} jobJob   
 * @property {string} 
 * @property {string} 
 * @property {string} 
 * @property {JobJobConfig} 
 * @property {JobByteLevel} 
 * @property {string} 
 * @property {string} 
 * @property {string} 
 * @property {string} 
 * @property {CommonSelectionList} 
 * @property {JobJobState} -  - JOB_STATE_NEW: The job has been created, and the user may still be updating its data sources and parameters.
 - JOB_STATE_STARTED: The job has begun execution after passing validation checks, including data sources, parameters, account balance, and grace period.
 - JOB_STATE_UPLOADING: The job has been retrieved from the partitionerâ€™s job queue and is being sent to the appropriate partitioning engine. Reaching this state confirms the presence of a suitable partitioning engine.
 - JOB_STATE_PARTITIONING: The partitioning engine processes the job and generates multiple chunks, preparing them for further execution.
 - JOB_STATE_PARTITIONED: The partitioning engine has successfully divided the job into chunks, forwarding them to the feeder for distribution. Workers begin fetching and processing these chunks.
 - JOB_STATE_TASKS_COMPLETED: All assigned tasks have been successfully processed by the task runner
 - JOB_STATE_MERGING: The assembler engine retrieves and merges the processed data.
 - JOB_STATE_MERGED: The assembler engine has successfully completed merging the processed chunks. The final result is now prepared for uploading to the specified destination.
 - JOB_STATE_DOWNLOADING: The final output is being saved to the designated data destination.
 - JOB_STATE_COMPLETE: The job lifecycle is successfully completed, and the result has been uploaded to the specified destination.
 - JOB_STATE_FAILED: The job has encountered an error and failed to produce output.
 * @property {DataSourceDataSource} - The data source object specifying configurations for inputs and outputs. Please refer to the dedicated guide for detailed instructions.
 * @property {JobAppParams} 
 * @property {DataSourceDataSource} - The data source object specifying configurations for inputs and outputs. Please refer to the dedicated guide for detailed instructions.
 * @property {number} 
 * @property {string} 
 * @property {string} 
 * @property {number} 
 * @property {string} 
 * @property {number} 
 * @property {string} 
 * @property {string} 
 * @property {any} 
 * @property {string} 
 */
export type JobJob = z.infer<typeof jobJob>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const jobJobResponse = z.lazy(() => {
  return z
    .object({
      id: z.string().optional(),
      templateId: z.string().optional(),
      name: z.string().optional(),
      config: jobJobConfigResponse.optional(),
      priority: jobByteLevel.optional(),
      startAt: z.string().optional(),
      submittedAt: z.string().optional(),
      startedAt: z.string().optional(),
      endedAt: z.string().optional(),
      regions: commonSelectionListResponse.optional(),
      state: jobJobState.optional(),
      dataSource: dataSourceDataSourceResponse.optional(),
      params: jobAppParamsResponse.optional(),
      dataDestination: dataSourceDataSourceResponse.optional(),
      duration: z.number().optional(),
      deletedAt: z.string().optional(),
      createdAt: z.string().optional(),
      paymentAmount: z.number().optional(),
      numUnitsEstimation: z.string().optional(),
      numChunks: z.number().optional(),
      errorMessage: z.string().optional(),
      description: z.string().optional(),
      stateTimestamps: z.any().optional(),
      appId: z.string().optional(),
    })
    .transform((data) => ({
      id: data['id'],
      templateId: data['templateId'],
      name: data['name'],
      config: data['config'],
      priority: data['priority'],
      startAt: data['startAt'],
      submittedAt: data['submittedAt'],
      startedAt: data['startedAt'],
      endedAt: data['endedAt'],
      regions: data['regions'],
      state: data['state'],
      dataSource: data['dataSource'],
      params: data['params'],
      dataDestination: data['dataDestination'],
      duration: data['duration'],
      deletedAt: data['deletedAt'],
      createdAt: data['createdAt'],
      paymentAmount: data['paymentAmount'],
      numUnitsEstimation: data['numUnitsEstimation'],
      numChunks: data['numChunks'],
      errorMessage: data['errorMessage'],
      description: data['description'],
      stateTimestamps: data['stateTimestamps'],
      appId: data['appId'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const jobJobRequest = z.lazy(() => {
  return z
    .object({
      id: z.string().optional(),
      templateId: z.string().optional(),
      name: z.string().optional(),
      config: jobJobConfigRequest.optional(),
      priority: jobByteLevel.optional(),
      startAt: z.string().optional(),
      submittedAt: z.string().optional(),
      startedAt: z.string().optional(),
      endedAt: z.string().optional(),
      regions: commonSelectionListRequest.optional(),
      state: jobJobState.optional(),
      dataSource: dataSourceDataSourceRequest.optional(),
      params: jobAppParamsRequest.optional(),
      dataDestination: dataSourceDataSourceRequest.optional(),
      duration: z.number().optional(),
      deletedAt: z.string().optional(),
      createdAt: z.string().optional(),
      paymentAmount: z.number().optional(),
      numUnitsEstimation: z.string().optional(),
      numChunks: z.number().optional(),
      errorMessage: z.string().optional(),
      description: z.string().optional(),
      stateTimestamps: z.any().optional(),
      appId: z.string().optional(),
    })
    .transform((data) => ({
      id: data['id'],
      templateId: data['templateId'],
      name: data['name'],
      config: data['config'],
      priority: data['priority'],
      startAt: data['startAt'],
      submittedAt: data['submittedAt'],
      startedAt: data['startedAt'],
      endedAt: data['endedAt'],
      regions: data['regions'],
      state: data['state'],
      dataSource: data['dataSource'],
      params: data['params'],
      dataDestination: data['dataDestination'],
      duration: data['duration'],
      deletedAt: data['deletedAt'],
      createdAt: data['createdAt'],
      paymentAmount: data['paymentAmount'],
      numUnitsEstimation: data['numUnitsEstimation'],
      numChunks: data['numChunks'],
      errorMessage: data['errorMessage'],
      description: data['description'],
      stateTimestamps: data['stateTimestamps'],
      appId: data['appId'],
    }));
});
