// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { ProtobufAny, protobufAny, protobufAnyRequest, protobufAnyResponse } from '../../common/protobuf-any';

/**
 * The shape of the model inside the application code - what the users use
 */
export const dataSourceDataSource = z.lazy(() => {
  return z.object({
    dataSourceDescriptor: z.string().optional(),
    params: protobufAny.optional(),
  });
});

/**
 * The data source object specifying configurations for inputs and outputs. Please refer to the dedicated guide for detailed instructions.
 * @typedef  {DataSourceDataSource} dataSourceDataSource - The data source object specifying configurations for inputs and outputs. Please refer to the dedicated guide for detailed instructions. - The data source object specifying configurations for inputs and outputs. Please refer to the dedicated guide for detailed instructions.
 * @property {string} - Data source selector.
 * @property {ProtobufAny}
 */
export type DataSourceDataSource = z.infer<typeof dataSourceDataSource>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const dataSourceDataSourceResponse = z.lazy(() => {
  return z
    .object({
      dataSourceDescriptor: z.string().optional(),
      params: protobufAnyResponse.optional(),
    })
    .transform((data) => ({
      dataSourceDescriptor: data['dataSourceDescriptor'],
      params: data['params'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const dataSourceDataSourceRequest = z.lazy(() => {
  return z
    .object({
      dataSourceDescriptor: z.string().optional(),
      params: protobufAnyRequest.optional(),
    })
    .transform((data) => ({
      dataSourceDescriptor: data['dataSourceDescriptor'],
      params: data['params'],
    }));
});
