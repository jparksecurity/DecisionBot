// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const jobAppParams = z.lazy(() => {
  return z.object({
    preset: z.string().optional(),
    partitioner: z.any().optional(),
    assembler: z.any().optional(),
    app: z.any().optional(),
  });
});

/**
 *
 * @typedef  {JobAppParams} jobAppParams
 * @property {string} - [Deprecated] Preset configuration. This field is no longer in use.
 * @property {any} - Sets parameters for the partitioning engine.
 * @property {any} - Sets parameters for the assembling engine.
 * @property {any} - Sets parameters for the application..
 */
export type JobAppParams = z.infer<typeof jobAppParams>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const jobAppParamsResponse = z.lazy(() => {
  return z
    .object({
      preset: z.string().optional(),
      partitioner: z.any().optional(),
      assembler: z.any().optional(),
      app: z.any().optional(),
    })
    .transform((data) => ({
      preset: data['preset'],
      partitioner: data['partitioner'],
      assembler: data['assembler'],
      app: data['app'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const jobAppParamsRequest = z.lazy(() => {
  return z
    .object({
      preset: z.string().optional(),
      partitioner: z.any().optional(),
      assembler: z.any().optional(),
      app: z.any().optional(),
    })
    .transform((data) => ({
      preset: data['preset'],
      partitioner: data['partitioner'],
      assembler: data['assembler'],
      app: data['app'],
    }));
});
