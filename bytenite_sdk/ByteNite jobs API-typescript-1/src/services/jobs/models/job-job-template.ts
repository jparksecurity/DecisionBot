// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const jobJobTemplate = z.lazy(() => {
  return z.object({
    id: z.string().optional(),
    owner: z.string().optional(),
    description: z.string().optional(),
    app: z.string().optional(),
    partitioner: z.string().optional(),
    assembler: z.string().optional(),
  });
});

/**
 *
 * @typedef  {JobJobTemplate} jobJobTemplate
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {string}
 */
export type JobJobTemplate = z.infer<typeof jobJobTemplate>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const jobJobTemplateResponse = z.lazy(() => {
  return z
    .object({
      id: z.string().optional(),
      owner: z.string().optional(),
      description: z.string().optional(),
      app: z.string().optional(),
      partitioner: z.string().optional(),
      assembler: z.string().optional(),
    })
    .transform((data) => ({
      id: data['id'],
      owner: data['owner'],
      description: data['description'],
      app: data['app'],
      partitioner: data['partitioner'],
      assembler: data['assembler'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const jobJobTemplateRequest = z.lazy(() => {
  return z
    .object({
      id: z.string().optional(),
      owner: z.string().optional(),
      description: z.string().optional(),
      app: z.string().optional(),
      partitioner: z.string().optional(),
      assembler: z.string().optional(),
    })
    .transform((data) => ({
      id: data['id'],
      owner: data['owner'],
      description: data['description'],
      app: data['app'],
      partitioner: data['partitioner'],
      assembler: data['assembler'],
    }));
});
