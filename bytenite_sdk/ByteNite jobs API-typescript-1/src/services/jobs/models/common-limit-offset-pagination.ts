// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const commonLimitOffsetPagination = z.lazy(() => {
  return z.object({
    limit: z.number().optional(),
    offset: z.number().optional(),
  });
});

/**
 *
 * @typedef  {CommonLimitOffsetPagination} commonLimitOffsetPagination
 * @property {number} - Number of rows to return per page.
 * @property {number} - Number of rows to skip before starting to collect the result set.
 */
export type CommonLimitOffsetPagination = z.infer<typeof commonLimitOffsetPagination>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const commonLimitOffsetPaginationResponse = z.lazy(() => {
  return z
    .object({
      limit: z.number().optional(),
      offset: z.number().optional(),
    })
    .transform((data) => ({
      limit: data['limit'],
      offset: data['offset'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const commonLimitOffsetPaginationRequest = z.lazy(() => {
  return z
    .object({
      limit: z.number().optional(),
      offset: z.number().optional(),
    })
    .transform((data) => ({
      limit: data['limit'],
      offset: data['offset'],
    }));
});
