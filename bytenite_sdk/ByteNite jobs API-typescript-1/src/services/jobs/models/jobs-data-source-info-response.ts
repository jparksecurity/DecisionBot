// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { JobsDirectory, jobsDirectory, jobsDirectoryRequest, jobsDirectoryResponse } from './jobs-directory';

/**
 * The shape of the model inside the application code - what the users use
 */
export const jobsDataSourceInfoResponse = z.lazy(() => {
  return z.object({
    filename: z.string().optional(),
    path: z.string().optional(),
    size: z.string().optional(),
    properties: z.any().optional(),
    tempUrl: z.string().optional(),
    files: jobsDirectory.optional(),
  });
});

/**
 *
 * @typedef  {JobsDataSourceInfoResponse} jobsDataSourceInfoResponse
 * @property {string}
 * @property {string}
 * @property {string}
 * @property {any}
 * @property {string}
 * @property {JobsDirectory}
 */
export type JobsDataSourceInfoResponse = z.infer<typeof jobsDataSourceInfoResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const jobsDataSourceInfoResponseResponse = z.lazy(() => {
  return z
    .object({
      filename: z.string().optional(),
      path: z.string().optional(),
      size: z.string().optional(),
      properties: z.any().optional(),
      tempUrl: z.string().optional(),
      files: jobsDirectoryResponse.optional(),
    })
    .transform((data) => ({
      filename: data['filename'],
      path: data['path'],
      size: data['size'],
      properties: data['properties'],
      tempUrl: data['tempUrl'],
      files: data['files'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const jobsDataSourceInfoResponseRequest = z.lazy(() => {
  return z
    .object({
      filename: z.string().optional(),
      path: z.string().optional(),
      size: z.string().optional(),
      properties: z.any().optional(),
      tempUrl: z.string().optional(),
      files: jobsDirectoryRequest.optional(),
    })
    .transform((data) => ({
      filename: data['filename'],
      path: data['path'],
      size: data['size'],
      properties: data['properties'],
      tempUrl: data['tempUrl'],
      files: data['files'],
    }));
});
