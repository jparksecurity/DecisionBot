// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { JobsJobResult, jobsJobResult, jobsJobResultRequest, jobsJobResultResponse } from './jobs-job-result';

/**
 * The shape of the model inside the application code - what the users use
 */
export const jobsJobResultsResponse = z.lazy(() => {
  return z.object({
    results: z.array(jobsJobResult).optional(),
  });
});

/**
 *
 * @typedef  {JobsJobResultsResponse} jobsJobResultsResponse
 * @property {JobsJobResult[]}
 */
export type JobsJobResultsResponse = z.infer<typeof jobsJobResultsResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const jobsJobResultsResponseResponse = z.lazy(() => {
  return z
    .object({
      results: z.array(jobsJobResultResponse).optional(),
    })
    .transform((data) => ({
      results: data['results'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const jobsJobResultsResponseRequest = z.lazy(() => {
  return z
    .object({
      results: z.array(jobsJobResultRequest).optional(),
    })
    .transform((data) => ({
      results: data['results'],
    }));
});
