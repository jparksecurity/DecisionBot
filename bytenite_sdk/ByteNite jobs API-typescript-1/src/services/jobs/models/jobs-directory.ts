// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { JobsFile, jobsFile, jobsFileRequest, jobsFileResponse } from './jobs-file';

/**
 * The shape of the model without circular references
 */
const _jobsDirectory = z.object({
  name: z.string().optional(),
  path: z.string().optional(),
  files: z.array(jobsFile).optional(),
});

type _JobsDirectory = z.infer<typeof _jobsDirectory> & {
  directories?: JobsDirectory[];
};

/**
 * The shape of the model inside the application code - what the users use
 */
export const jobsDirectory: z.ZodLazy<z.ZodType<_JobsDirectory>> = z.lazy(() => {
  return _jobsDirectory.extend({
    directories: z.array(jobsDirectory).optional(),
  });
});

/**
 *
 * @typedef  {JobsDirectory} jobsDirectory
 * @property {string}
 * @property {string}
 * @property {JobsDirectory[]}
 * @property {JobsFile[]}
 */
export type JobsDirectory = z.infer<typeof jobsDirectory>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const jobsDirectoryResponse: z.ZodLazy<z.ZodSchema> = z.lazy(() => {
  return z
    .object({
      name: z.string().optional(),
      path: z.string().optional(),
      directories: z.array(jobsDirectoryResponse).optional(),
      files: z.array(jobsFileResponse).optional(),
    })
    .transform((data) => ({
      name: data['name'],
      path: data['path'],
      directories: data['directories'],
      files: data['files'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const jobsDirectoryRequest: z.ZodLazy<z.ZodSchema> = z.lazy(() => {
  return z
    .object({
      name: z.string().optional(),
      path: z.string().optional(),
      directories: z.array(jobsDirectoryRequest).optional(),
      files: z.array(jobsFileRequest).optional(),
    })
    .transform((data) => ({
      name: data['name'],
      path: data['path'],
      directories: data['directories'],
      files: data['files'],
    }));
});
