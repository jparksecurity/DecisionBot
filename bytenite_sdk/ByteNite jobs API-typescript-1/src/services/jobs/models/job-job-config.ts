// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const jobJobConfig = z.lazy(() => {
  return z.object({
    taskTimeout: z.number().optional(),
    jobTimeout: z.number().optional(),
    isTestJob: z.boolean().optional(),
  });
});

/**
 *
 * @typedef  {JobJobConfig} jobJobConfig
 * @property {number}
 * @property {number}
 * @property {boolean}
 */
export type JobJobConfig = z.infer<typeof jobJobConfig>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const jobJobConfigResponse = z.lazy(() => {
  return z
    .object({
      taskTimeout: z.number().optional(),
      jobTimeout: z.number().optional(),
      isTestJob: z.boolean().optional(),
    })
    .transform((data) => ({
      taskTimeout: data['taskTimeout'],
      jobTimeout: data['jobTimeout'],
      isTestJob: data['isTestJob'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const jobJobConfigRequest = z.lazy(() => {
  return z
    .object({
      taskTimeout: z.number().optional(),
      jobTimeout: z.number().optional(),
      isTestJob: z.boolean().optional(),
    })
    .transform((data) => ({
      taskTimeout: data['taskTimeout'],
      jobTimeout: data['jobTimeout'],
      isTestJob: data['isTestJob'],
    }));
});
