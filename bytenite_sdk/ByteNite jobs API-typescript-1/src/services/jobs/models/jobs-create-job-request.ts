// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  DataSourceDataSource,
  dataSourceDataSource,
  dataSourceDataSourceRequest,
  dataSourceDataSourceResponse,
} from './data-source-data-source';
import { JobAppParams, jobAppParams, jobAppParamsRequest, jobAppParamsResponse } from './job-app-params';
import { JobJobConfig, jobJobConfig, jobJobConfigRequest, jobJobConfigResponse } from './job-job-config';

/**
 * The shape of the model inside the application code - what the users use
 */
export const jobsCreateJobRequest = z.lazy(() => {
  return z.object({
    jobId: z.string().optional(),
    name: z.string().optional(),
    templateId: z.string(),
    description: z.string().optional(),
    dataSource: dataSourceDataSource.optional(),
    dataDestination: dataSourceDataSource.optional(),
    params: jobAppParams.optional(),
    config: jobJobConfig.optional(),
  });
});

/**
 * If job id already exists and the request hasn't started the job record is updated, if job id is null a new id is generated.
 * @typedef  {JobsCreateJobRequest} jobsCreateJobRequest - If job id already exists and the request hasn't started the job record is updated, if job id is null a new id is generated. - If job id already exists and the request hasn't started the job record is updated, if job id is null a new id is generated.
 * @property {string} - Unique identifier for the job, automatically generated if left blank.
 * @property {string} - Mnemonic name for the job.
 * @property {string} - Identifier of the application template used for this job.
 * @property {string} - Textual description of the job.
 * @property {DataSourceDataSource} - The data source object specifying configurations for inputs and outputs. Please refer to the dedicated guide for detailed instructions.
 * @property {DataSourceDataSource} - The data source object specifying configurations for inputs and outputs. Please refer to the dedicated guide for detailed instructions.
 * @property {JobAppParams}
 * @property {JobJobConfig}
 */
export type JobsCreateJobRequest = z.infer<typeof jobsCreateJobRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const jobsCreateJobRequestResponse = z.lazy(() => {
  return z
    .object({
      jobId: z.string().optional(),
      name: z.string().optional(),
      templateId: z.string(),
      description: z.string().optional(),
      dataSource: dataSourceDataSourceResponse.optional(),
      dataDestination: dataSourceDataSourceResponse.optional(),
      params: jobAppParamsResponse.optional(),
      config: jobJobConfigResponse.optional(),
    })
    .transform((data) => ({
      jobId: data['jobId'],
      name: data['name'],
      templateId: data['templateId'],
      description: data['description'],
      dataSource: data['dataSource'],
      dataDestination: data['dataDestination'],
      params: data['params'],
      config: data['config'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const jobsCreateJobRequestRequest = z.lazy(() => {
  return z
    .object({
      jobId: z.string().optional(),
      name: z.string().optional(),
      templateId: z.string(),
      description: z.string().optional(),
      dataSource: dataSourceDataSourceRequest.optional(),
      dataDestination: dataSourceDataSourceRequest.optional(),
      params: jobAppParamsRequest.optional(),
      config: jobJobConfigRequest.optional(),
    })
    .transform((data) => ({
      jobId: data['jobId'],
      name: data['name'],
      templateId: data['templateId'],
      description: data['description'],
      dataSource: data['dataSource'],
      dataDestination: data['dataDestination'],
      params: data['params'],
      config: data['config'],
    }));
});
