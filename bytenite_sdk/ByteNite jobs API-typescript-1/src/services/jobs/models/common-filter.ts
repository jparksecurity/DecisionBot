// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { CommonFilterCondition, commonFilterCondition } from './common-filter-condition';
import { ProtobufAny, protobufAny, protobufAnyRequest, protobufAnyResponse } from '../../common/protobuf-any';

/**
 * The shape of the model inside the application code - what the users use
 */
export const commonFilter = z.lazy(() => {
  return z.object({
    field: z.string().optional(),
    condition: commonFilterCondition.optional(),
    value: protobufAny.optional(),
  });
});

/**
 *
 * @typedef  {CommonFilter} commonFilter
 * @property {string} - The field to apply the filter on
 * @property {CommonFilterCondition}
 * @property {ProtobufAny}
 */
export type CommonFilter = z.infer<typeof commonFilter>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const commonFilterResponse = z.lazy(() => {
  return z
    .object({
      field: z.string().optional(),
      condition: commonFilterCondition.optional(),
      value: protobufAnyResponse.optional(),
    })
    .transform((data) => ({
      field: data['field'],
      condition: data['condition'],
      value: data['value'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const commonFilterRequest = z.lazy(() => {
  return z
    .object({
      field: z.string().optional(),
      condition: commonFilterCondition.optional(),
      value: protobufAnyRequest.optional(),
    })
    .transform((data) => ({
      field: data['field'],
      condition: data['condition'],
      value: data['value'],
    }));
});
