// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { JobJob, jobJob, jobJobRequest, jobJobResponse } from './job-job';
import { JobJobTemplate, jobJobTemplate, jobJobTemplateRequest, jobJobTemplateResponse } from './job-job-template';

/**
 * The shape of the model inside the application code - what the users use
 */
export const jobsJobResponse = z.lazy(() => {
  return z.object({
    job: jobJob.optional(),
    templateInfo: jobJobTemplate.optional(),
  });
});

/**
 *
 * @typedef  {JobsJobResponse} jobsJobResponse
 * @property {JobJob}
 * @property {JobJobTemplate}
 */
export type JobsJobResponse = z.infer<typeof jobsJobResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const jobsJobResponseResponse = z.lazy(() => {
  return z
    .object({
      job: jobJobResponse.optional(),
      templateInfo: jobJobTemplateResponse.optional(),
    })
    .transform((data) => ({
      job: data['job'],
      templateInfo: data['templateInfo'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const jobsJobResponseRequest = z.lazy(() => {
  return z
    .object({
      job: jobJobRequest.optional(),
      templateInfo: jobJobTemplateRequest.optional(),
    })
    .transform((data) => ({
      job: data['job'],
      templateInfo: data['templateInfo'],
    }));
});
