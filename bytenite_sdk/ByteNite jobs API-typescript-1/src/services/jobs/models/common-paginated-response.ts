// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const commonPaginatedResponse = z.lazy(() => {
  return z.object({
    total: z.number().optional(),
    offset: z.number().optional(),
    hasPrevious: z.boolean().optional(),
    hasNext: z.boolean().optional(),
  });
});

/**
 * This section provides information about how the results are divided into pages.
 * @typedef  {CommonPaginatedResponse} commonPaginatedResponse - This section provides information about how the results are divided into pages. - This section provides information about how the results are divided into pages.
 * @property {number} - The total number of transactions available.
 * @property {number} - The starting position of the current page of results, starting from 0.
 * @property {boolean} - A boolean value (True/False) indicating whether there's a previous page of results. False if the current page is the first page.
 * @property {boolean} - A boolean value indicating whether there's a next page of results.
 */
export type CommonPaginatedResponse = z.infer<typeof commonPaginatedResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const commonPaginatedResponseResponse = z.lazy(() => {
  return z
    .object({
      total: z.number().optional(),
      offset: z.number().optional(),
      hasPrevious: z.boolean().optional(),
      hasNext: z.boolean().optional(),
    })
    .transform((data) => ({
      total: data['total'],
      offset: data['offset'],
      hasPrevious: data['hasPrevious'],
      hasNext: data['hasNext'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const commonPaginatedResponseRequest = z.lazy(() => {
  return z
    .object({
      total: z.number().optional(),
      offset: z.number().optional(),
      hasPrevious: z.boolean().optional(),
      hasNext: z.boolean().optional(),
    })
    .transform((data) => ({
      total: data['total'],
      offset: data['offset'],
      hasPrevious: data['hasPrevious'],
      hasNext: data['hasNext'],
    }));
});
