// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import {
  DataSourceDataSource,
  dataSourceDataSource,
  dataSourceDataSourceRequest,
  dataSourceDataSourceResponse,
} from './data-source-data-source';

/**
 * The shape of the model inside the application code - what the users use
 */
export const jobsDataSourceInfoRequest = z.lazy(() => {
  return z.object({
    dataSource: dataSourceDataSource.optional(),
    listFiles: z.boolean().optional(),
  });
});

/**
 *
 * @typedef  {JobsDataSourceInfoRequest} jobsDataSourceInfoRequest
 * @property {DataSourceDataSource} - The data source object specifying configurations for inputs and outputs. Please refer to the dedicated guide for detailed instructions.
 * @property {boolean}
 */
export type JobsDataSourceInfoRequest = z.infer<typeof jobsDataSourceInfoRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const jobsDataSourceInfoRequestResponse = z.lazy(() => {
  return z
    .object({
      dataSource: dataSourceDataSourceResponse.optional(),
      listFiles: z.boolean().optional(),
    })
    .transform((data) => ({
      dataSource: data['dataSource'],
      listFiles: data['listFiles'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const jobsDataSourceInfoRequestRequest = z.lazy(() => {
  return z
    .object({
      dataSource: dataSourceDataSourceRequest.optional(),
      listFiles: z.boolean().optional(),
    })
    .transform((data) => ({
      dataSource: data['dataSource'],
      listFiles: data['listFiles'],
    }));
});
