// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const customerJobsRunningTasksRequest = z.lazy(() => {
  return z.object({
    jobsIds: z.array(z.string()),
  });
});

/**
 * Get the running tasks for the provided jobs.
 * @typedef  {CustomerJobsRunningTasksRequest} customerJobsRunningTasksRequest - Get the running tasks for the provided jobs. - Get the running tasks for the provided jobs.
 * @property {string[]}
 */
export type CustomerJobsRunningTasksRequest = z.infer<typeof customerJobsRunningTasksRequest>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const customerJobsRunningTasksRequestResponse = z.lazy(() => {
  return z
    .object({
      jobsIds: z.array(z.string()),
    })
    .transform((data) => ({
      jobsIds: data['jobsIds'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const customerJobsRunningTasksRequestRequest = z.lazy(() => {
  return z
    .object({
      jobsIds: z.array(z.string()),
    })
    .transform((data) => ({
      jobsIds: data['jobsIds'],
    }));
});
